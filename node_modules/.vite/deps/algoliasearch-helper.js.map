{
  "version": 3,
  "sources": ["../../@algolia/events/events.js", "../../algoliasearch-helper/src/functions/inherits.js", "../../algoliasearch-helper/src/DerivedHelper/index.js", "../../algoliasearch-helper/src/functions/escapeFacetValue.js", "../../algoliasearch-helper/src/functions/merge.js", "../../algoliasearch-helper/src/functions/objectHasKeys.js", "../../algoliasearch-helper/src/functions/omit.js", "../../algoliasearch-helper/src/RecommendParameters/index.js", "../../algoliasearch-helper/src/RecommendResults/index.js", "../../algoliasearch-helper/src/requestBuilder.js", "../../algoliasearch-helper/src/functions/defaultsPure.js", "../../algoliasearch-helper/src/functions/find.js", "../../algoliasearch-helper/src/functions/intersection.js", "../../algoliasearch-helper/src/functions/valToNumber.js", "../../algoliasearch-helper/src/utils/isValidUserToken.js", "../../algoliasearch-helper/src/SearchParameters/RefinementList.js", "../../algoliasearch-helper/src/SearchParameters/index.js", "../../algoliasearch-helper/src/functions/compact.js", "../../algoliasearch-helper/src/functions/findIndex.js", "../../algoliasearch-helper/src/functions/formatSort.js", "../../algoliasearch-helper/src/functions/orderBy.js", "../../algoliasearch-helper/src/SearchResults/generate-hierarchical-tree.js", "../../algoliasearch-helper/src/SearchResults/index.js", "../../algoliasearch-helper/src/functions/flat.js", "../../algoliasearch-helper/src/utils/sortAndMergeRecommendations.js", "../../algoliasearch-helper/src/version.js", "../../algoliasearch-helper/src/algoliasearch.helper.js", "../../algoliasearch-helper/index.js"],
  "sourcesContent": ["// Copyright Joyent, Inc. and other Node contributors.\n//\n// Permission is hereby granted, free of charge, to any person obtaining a\n// copy of this software and associated documentation files (the\n// \"Software\"), to deal in the Software without restriction, including\n// without limitation the rights to use, copy, modify, merge, publish,\n// distribute, sublicense, and/or sell copies of the Software, and to permit\n// persons to whom the Software is furnished to do so, subject to the\n// following conditions:\n//\n// The above copyright notice and this permission notice shall be included\n// in all copies or substantial portions of the Software.\n//\n// THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS\n// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\n// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN\n// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,\n// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR\n// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE\n// USE OR OTHER DEALINGS IN THE SOFTWARE.\n\nfunction EventEmitter() {\n  this._events = this._events || {};\n  this._maxListeners = this._maxListeners || undefined;\n}\nmodule.exports = EventEmitter;\n\n// Backwards-compat with node 0.10.x\n// EventEmitter.EventEmitter = EventEmitter;\n\nEventEmitter.prototype._events = undefined;\nEventEmitter.prototype._maxListeners = undefined;\n\n// By default EventEmitters will print a warning if more than 10 listeners are\n// added to it. This is a useful default which helps finding memory leaks.\nEventEmitter.defaultMaxListeners = 10;\n\n// Obviously not all Emitters should be limited to 10. This function allows\n// that to be increased. Set to zero for unlimited.\nEventEmitter.prototype.setMaxListeners = function(n) {\n  if (!isNumber(n) || n < 0 || isNaN(n))\n    throw TypeError('n must be a positive number');\n  this._maxListeners = n;\n  return this;\n};\n\nEventEmitter.prototype.emit = function(type) {\n  var er, handler, len, args, i, listeners;\n\n  if (!this._events)\n    this._events = {};\n\n  // If there is no 'error' event listener then throw.\n  if (type === 'error') {\n    if (!this._events.error ||\n        (isObject(this._events.error) && !this._events.error.length)) {\n      er = arguments[1];\n      if (er instanceof Error) {\n        throw er; // Unhandled 'error' event\n      } else {\n        // At least give some kind of context to the user\n        var err = new Error('Uncaught, unspecified \"error\" event. (' + er + ')');\n        err.context = er;\n        throw err;\n      }\n    }\n  }\n\n  handler = this._events[type];\n\n  if (isUndefined(handler))\n    return false;\n\n  if (isFunction(handler)) {\n    switch (arguments.length) {\n      // fast cases\n      case 1:\n        handler.call(this);\n        break;\n      case 2:\n        handler.call(this, arguments[1]);\n        break;\n      case 3:\n        handler.call(this, arguments[1], arguments[2]);\n        break;\n      // slower\n      default:\n        args = Array.prototype.slice.call(arguments, 1);\n        handler.apply(this, args);\n    }\n  } else if (isObject(handler)) {\n    args = Array.prototype.slice.call(arguments, 1);\n    listeners = handler.slice();\n    len = listeners.length;\n    for (i = 0; i < len; i++)\n      listeners[i].apply(this, args);\n  }\n\n  return true;\n};\n\nEventEmitter.prototype.addListener = function(type, listener) {\n  var m;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events)\n    this._events = {};\n\n  // To avoid recursion in the case that type === \"newListener\"! Before\n  // adding it to the listeners, first emit \"newListener\".\n  if (this._events.newListener)\n    this.emit('newListener', type,\n              isFunction(listener.listener) ?\n              listener.listener : listener);\n\n  if (!this._events[type])\n    // Optimize the case of one listener. Don't need the extra array object.\n    this._events[type] = listener;\n  else if (isObject(this._events[type]))\n    // If we've already got an array, just append.\n    this._events[type].push(listener);\n  else\n    // Adding the second element, need to change to array.\n    this._events[type] = [this._events[type], listener];\n\n  // Check for listener leak\n  if (isObject(this._events[type]) && !this._events[type].warned) {\n    if (!isUndefined(this._maxListeners)) {\n      m = this._maxListeners;\n    } else {\n      m = EventEmitter.defaultMaxListeners;\n    }\n\n    if (m && m > 0 && this._events[type].length > m) {\n      this._events[type].warned = true;\n      console.error('(node) warning: possible EventEmitter memory ' +\n                    'leak detected. %d listeners added. ' +\n                    'Use emitter.setMaxListeners() to increase limit.',\n                    this._events[type].length);\n      if (typeof console.trace === 'function') {\n        // not supported in IE 10\n        console.trace();\n      }\n    }\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.on = EventEmitter.prototype.addListener;\n\nEventEmitter.prototype.once = function(type, listener) {\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  var fired = false;\n\n  function g() {\n    this.removeListener(type, g);\n\n    if (!fired) {\n      fired = true;\n      listener.apply(this, arguments);\n    }\n  }\n\n  g.listener = listener;\n  this.on(type, g);\n\n  return this;\n};\n\n// emits a 'removeListener' event iff the listener was removed\nEventEmitter.prototype.removeListener = function(type, listener) {\n  var list, position, length, i;\n\n  if (!isFunction(listener))\n    throw TypeError('listener must be a function');\n\n  if (!this._events || !this._events[type])\n    return this;\n\n  list = this._events[type];\n  length = list.length;\n  position = -1;\n\n  if (list === listener ||\n      (isFunction(list.listener) && list.listener === listener)) {\n    delete this._events[type];\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n\n  } else if (isObject(list)) {\n    for (i = length; i-- > 0;) {\n      if (list[i] === listener ||\n          (list[i].listener && list[i].listener === listener)) {\n        position = i;\n        break;\n      }\n    }\n\n    if (position < 0)\n      return this;\n\n    if (list.length === 1) {\n      list.length = 0;\n      delete this._events[type];\n    } else {\n      list.splice(position, 1);\n    }\n\n    if (this._events.removeListener)\n      this.emit('removeListener', type, listener);\n  }\n\n  return this;\n};\n\nEventEmitter.prototype.removeAllListeners = function(type) {\n  var key, listeners;\n\n  if (!this._events)\n    return this;\n\n  // not listening for removeListener, no need to emit\n  if (!this._events.removeListener) {\n    if (arguments.length === 0)\n      this._events = {};\n    else if (this._events[type])\n      delete this._events[type];\n    return this;\n  }\n\n  // emit removeListener for all listeners on all events\n  if (arguments.length === 0) {\n    for (key in this._events) {\n      if (key === 'removeListener') continue;\n      this.removeAllListeners(key);\n    }\n    this.removeAllListeners('removeListener');\n    this._events = {};\n    return this;\n  }\n\n  listeners = this._events[type];\n\n  if (isFunction(listeners)) {\n    this.removeListener(type, listeners);\n  } else if (listeners) {\n    // LIFO order\n    while (listeners.length)\n      this.removeListener(type, listeners[listeners.length - 1]);\n  }\n  delete this._events[type];\n\n  return this;\n};\n\nEventEmitter.prototype.listeners = function(type) {\n  var ret;\n  if (!this._events || !this._events[type])\n    ret = [];\n  else if (isFunction(this._events[type]))\n    ret = [this._events[type]];\n  else\n    ret = this._events[type].slice();\n  return ret;\n};\n\nEventEmitter.prototype.listenerCount = function(type) {\n  if (this._events) {\n    var evlistener = this._events[type];\n\n    if (isFunction(evlistener))\n      return 1;\n    else if (evlistener)\n      return evlistener.length;\n  }\n  return 0;\n};\n\nEventEmitter.listenerCount = function(emitter, type) {\n  return emitter.listenerCount(type);\n};\n\nfunction isFunction(arg) {\n  return typeof arg === 'function';\n}\n\nfunction isNumber(arg) {\n  return typeof arg === 'number';\n}\n\nfunction isObject(arg) {\n  return typeof arg === 'object' && arg !== null;\n}\n\nfunction isUndefined(arg) {\n  return arg === void 0;\n}\n", "'use strict';\n\nfunction inherits(ctor, superCtor) {\n  ctor.prototype = Object.create(superCtor.prototype, {\n    constructor: {\n      value: ctor,\n      enumerable: false,\n      writable: true,\n      configurable: true,\n    },\n  });\n}\n\nmodule.exports = inherits;\n", "'use strict';\n\nvar EventEmitter = require('@algolia/events');\n\nvar inherits = require('../functions/inherits');\n\n/**\n * A DerivedHelper is a way to create sub requests to\n * Algolia from a main helper.\n * @class\n * @classdesc The DerivedHelper provides an event based interface for search callbacks:\n *  - search: when a search is triggered using the `search()` method.\n *  - result: when the response is retrieved from Algolia and is processed.\n *    This event contains a {@link SearchResults} object and the\n *    {@link SearchParameters} corresponding to this answer.\n * @param {AlgoliaSearchHelper} mainHelper the main helper\n * @param {function} fn the function to create the derived state for search\n * @param {function} recommendFn the function to create the derived state for recommendations\n */\nfunction DerivedHelper(mainHelper, fn, recommendFn) {\n  this.main = mainHelper;\n  this.fn = fn;\n  this.recommendFn = recommendFn;\n  this.lastResults = null;\n  this.lastRecommendResults = null;\n}\n\ninherits(DerivedHelper, EventEmitter);\n\n/**\n * Detach this helper from the main helper\n * @return {undefined}\n * @throws Error if the derived helper is already detached\n */\nDerivedHelper.prototype.detach = function () {\n  this.removeAllListeners();\n  this.main.detachDerivedHelper(this);\n};\n\nDerivedHelper.prototype.getModifiedState = function (parameters) {\n  return this.fn(parameters);\n};\n\nDerivedHelper.prototype.getModifiedRecommendState = function (parameters) {\n  return this.recommendFn(parameters);\n};\n\nmodule.exports = DerivedHelper;\n", "'use strict';\n\n/**\n * Replaces a leading - with \\-\n * @private\n * @param {any} value the facet value to replace\n * @returns {any} the escaped facet value or the value if it was not a string\n */\nfunction escapeFacetValue(value) {\n  if (typeof value !== 'string') return value;\n\n  return String(value).replace(/^-/, '\\\\-');\n}\n\n/**\n * Replaces a leading \\- with -\n * @private\n * @param {any} value the escaped facet value\n * @returns {any} the unescaped facet value or the value if it was not a string\n */\nfunction unescapeFacetValue(value) {\n  if (typeof value !== 'string') return value;\n\n  return value.replace(/^\\\\-/, '-');\n}\n\nmodule.exports = {\n  escapeFacetValue: escapeFacetValue,\n  unescapeFacetValue: unescapeFacetValue,\n};\n", "'use strict';\n\nfunction clone(value) {\n  if (typeof value === 'object' && value !== null) {\n    return _merge(Array.isArray(value) ? [] : {}, value);\n  }\n  return value;\n}\n\nfunction isObjectOrArrayOrFunction(value) {\n  return (\n    typeof value === 'function' ||\n    Array.isArray(value) ||\n    Object.prototype.toString.call(value) === '[object Object]'\n  );\n}\n\nfunction _merge(target, source) {\n  if (target === source) {\n    return target;\n  }\n\n  // eslint-disable-next-line no-restricted-syntax\n  for (var key in source) {\n    if (\n      !Object.prototype.hasOwnProperty.call(source, key) ||\n      key === '__proto__' ||\n      key === 'constructor'\n    ) {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    var sourceVal = source[key];\n    var targetVal = target[key];\n\n    if (typeof targetVal !== 'undefined' && typeof sourceVal === 'undefined') {\n      // eslint-disable-next-line no-continue\n      continue;\n    }\n\n    if (\n      isObjectOrArrayOrFunction(targetVal) &&\n      isObjectOrArrayOrFunction(sourceVal)\n    ) {\n      target[key] = _merge(targetVal, sourceVal);\n    } else {\n      target[key] = clone(sourceVal);\n    }\n  }\n  return target;\n}\n\n/**\n * This method is like Object.assign, but recursively merges own and inherited\n * enumerable keyed properties of source objects into the destination object.\n *\n * NOTE: this behaves like lodash/merge, but:\n * - does mutate functions if they are a source\n * - treats non-plain objects as plain\n * - does not work for circular objects\n * - treats sparse arrays as sparse\n * - does not convert Array-like objects (Arguments, NodeLists, etc.) to arrays\n *\n * @param {Object} target The destination object.\n * @param {...Object} [sources] The source objects.\n * @returns {Object} Returns `object`.\n */\nfunction merge(target) {\n  if (!isObjectOrArrayOrFunction(target)) {\n    target = {};\n  }\n\n  for (var i = 1, l = arguments.length; i < l; i++) {\n    var source = arguments[i];\n\n    if (isObjectOrArrayOrFunction(source)) {\n      _merge(target, source);\n    }\n  }\n  return target;\n}\n\nmodule.exports = merge;\n", "'use strict';\n\nfunction objectHasKeys(obj) {\n  return obj && Object.keys(obj).length > 0;\n}\n\nmodule.exports = objectHasKeys;\n", "'use strict';\n\n// https://github.com/babel/babel/blob/3aaafae053fa75febb3aa45d45b6f00646e30ba4/packages/babel-helpers/src/helpers.js#L604-L620\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source === null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key;\n  var i;\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    // eslint-disable-next-line no-continue\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n  return target;\n}\n\nmodule.exports = _objectWithoutPropertiesLoose;\n", "'use strict';\n\n/**\n * RecommendParameters is the data structure that contains all the information\n * usable for getting recommendations from the Algolia API. It doesn't do the\n * search itself, nor does it contains logic about the parameters.\n * It is an immutable object, therefore it has been created in a way that each\n * changes does not change the object itself but returns a copy with the\n * modification.\n * This object should probably not be instantiated outside of the helper. It\n * will be provided when needed.\n * @constructor\n * @classdesc contains all the parameters for recommendations\n * @param {RecommendParametersOptions} opts the options to create the object\n */\nfunction RecommendParameters(opts) {\n  opts = opts || {};\n  this.params = opts.params || [];\n}\n\nRecommendParameters.prototype = {\n  constructor: RecommendParameters,\n\n  addParams: function (params) {\n    var newParams = this.params.slice();\n\n    newParams.push(params);\n\n    return new RecommendParameters({ params: newParams });\n  },\n\n  removeParams: function (id) {\n    return new RecommendParameters({\n      params: this.params.filter(function (param) {\n        return param.$$id !== id;\n      }),\n    });\n  },\n\n  addFrequentlyBoughtTogether: function (params) {\n    return this.addParams(\n      Object.assign({}, params, { model: 'bought-together' })\n    );\n  },\n\n  addRelatedProducts: function (params) {\n    return this.addParams(\n      Object.assign({}, params, { model: 'related-products' })\n    );\n  },\n\n  addTrendingItems: function (params) {\n    return this.addParams(\n      Object.assign({}, params, { model: 'trending-items' })\n    );\n  },\n\n  addTrendingFacets: function (params) {\n    return this.addParams(\n      Object.assign({}, params, { model: 'trending-facets' })\n    );\n  },\n\n  addLookingSimilar: function (params) {\n    return this.addParams(\n      Object.assign({}, params, { model: 'looking-similar' })\n    );\n  },\n\n  _buildQueries: function (indexName, cache) {\n    return this.params\n      .filter(function (params) {\n        return cache[params.$$id] === undefined;\n      })\n      .map(function (params) {\n        var query = Object.assign({}, params, {\n          indexName: indexName,\n          // @TODO: remove this if it ever gets handled by the API\n          threshold: params.threshold || 0,\n        });\n        delete query.$$id;\n\n        return query;\n      });\n  },\n};\n\nmodule.exports = RecommendParameters;\n", "'use strict';\n\n/**\n * Constructor for SearchResults\n * @class\n * @classdesc SearchResults contains the results of a query to Algolia using the\n * {@link AlgoliaSearchHelper}.\n * @param {RecommendParameters} state state that led to the response\n * @param {Record<string,RecommendResultItem>} results the results from algolia client\n **/\nfunction RecommendResults(state, results) {\n  this._state = state;\n  this._rawResults = {};\n\n  // eslint-disable-next-line consistent-this\n  var self = this;\n\n  state.params.forEach(function (param) {\n    var id = param.$$id;\n    self[id] = results[id];\n    self._rawResults[id] = results[id];\n  });\n}\n\nRecommendResults.prototype = {\n  constructor: RecommendResults,\n};\n\nmodule.exports = RecommendResults;\n", "'use strict';\n\nvar merge = require('./functions/merge');\n\nfunction sortObject(obj) {\n  return Object.keys(obj)\n    .sort()\n    .reduce(function (acc, curr) {\n      acc[curr] = obj[curr];\n      return acc;\n    }, {});\n}\n\nvar requestBuilder = {\n  /**\n   * Get all the queries to send to the client, those queries can used directly\n   * with the Algolia client.\n   * @private\n   * @param  {string} index The name of the index\n   * @param  {SearchParameters} state The state from which to get the queries\n   * @return {object[]} The queries\n   */\n  _getQueries: function getQueries(index, state) {\n    var queries = [];\n\n    // One query for the hits\n    queries.push({\n      indexName: index,\n      params: requestBuilder._getHitsSearchParams(state),\n    });\n\n    // One for each disjunctive facets\n    state.getRefinedDisjunctiveFacets().forEach(function (refinedFacet) {\n      queries.push({\n        indexName: index,\n        params: requestBuilder._getDisjunctiveFacetSearchParams(\n          state,\n          refinedFacet\n        ),\n      });\n    });\n\n    // More to get the parent levels of the hierarchical facets when refined\n    state.getRefinedHierarchicalFacets().forEach(function (refinedFacet) {\n      var hierarchicalFacet = state.getHierarchicalFacetByName(refinedFacet);\n      var currentRefinement = state.getHierarchicalRefinement(refinedFacet);\n      var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n\n      // If we are deeper than level 0 (starting from `beer > IPA`)\n      // we want to get all parent values\n      if (\n        currentRefinement.length > 0 &&\n        currentRefinement[0].split(separator).length > 1\n      ) {\n        // We generate a map of the filters we will use for our facet values queries\n        var filtersMap = currentRefinement[0]\n          .split(separator)\n          .slice(0, -1)\n          .reduce(function createFiltersMap(map, segment, level) {\n            return map.concat({\n              attribute: hierarchicalFacet.attributes[level],\n              value:\n                level === 0\n                  ? segment\n                  : [map[map.length - 1].value, segment].join(separator),\n            });\n          }, []);\n\n        filtersMap.forEach(function (filter, level) {\n          var params = requestBuilder._getDisjunctiveFacetSearchParams(\n            state,\n            filter.attribute,\n            level === 0\n          );\n\n          // Keep facet filters unrelated to current hierarchical attributes\n          function hasHierarchicalFacetFilter(value) {\n            return hierarchicalFacet.attributes.some(function (attribute) {\n              return attribute === value.split(':')[0];\n            });\n          }\n\n          var filteredFacetFilters = (params.facetFilters || []).reduce(\n            function (acc, facetFilter) {\n              if (Array.isArray(facetFilter)) {\n                var filtered = facetFilter.filter(function (filterValue) {\n                  return !hasHierarchicalFacetFilter(filterValue);\n                });\n\n                if (filtered.length > 0) {\n                  acc.push(filtered);\n                }\n              }\n\n              if (\n                typeof facetFilter === 'string' &&\n                !hasHierarchicalFacetFilter(facetFilter)\n              ) {\n                acc.push(facetFilter);\n              }\n\n              return acc;\n            },\n            []\n          );\n\n          var parent = filtersMap[level - 1];\n          if (level > 0) {\n            params.facetFilters = filteredFacetFilters.concat(\n              parent.attribute + ':' + parent.value\n            );\n          } else if (filteredFacetFilters.length > 0) {\n            params.facetFilters = filteredFacetFilters;\n          } else {\n            delete params.facetFilters;\n          }\n\n          queries.push({ indexName: index, params: params });\n        });\n      }\n    });\n\n    return queries;\n  },\n\n  /**\n   * Build search parameters used to fetch hits\n   * @private\n   * @param  {SearchParameters} state The state from which to get the queries\n   * @return {object.<string, any>} The search parameters for hits\n   */\n  _getHitsSearchParams: function (state) {\n    var facets = state.facets\n      .concat(state.disjunctiveFacets)\n      .concat(requestBuilder._getHitsHierarchicalFacetsAttributes(state))\n      .sort();\n\n    var facetFilters = requestBuilder._getFacetFilters(state);\n    var numericFilters = requestBuilder._getNumericFilters(state);\n    var tagFilters = requestBuilder._getTagFilters(state);\n    var additionalParams = {};\n\n    if (facets.length > 0) {\n      additionalParams.facets = facets.indexOf('*') > -1 ? ['*'] : facets;\n    }\n\n    if (tagFilters.length > 0) {\n      additionalParams.tagFilters = tagFilters;\n    }\n\n    if (facetFilters.length > 0) {\n      additionalParams.facetFilters = facetFilters;\n    }\n\n    if (numericFilters.length > 0) {\n      additionalParams.numericFilters = numericFilters;\n    }\n\n    return sortObject(merge({}, state.getQueryParams(), additionalParams));\n  },\n\n  /**\n   * Build search parameters used to fetch a disjunctive facet\n   * @private\n   * @param  {SearchParameters} state The state from which to get the queries\n   * @param  {string} facet the associated facet name\n   * @param  {boolean} hierarchicalRootLevel ?? FIXME\n   * @return {object} The search parameters for a disjunctive facet\n   */\n  _getDisjunctiveFacetSearchParams: function (\n    state,\n    facet,\n    hierarchicalRootLevel\n  ) {\n    var facetFilters = requestBuilder._getFacetFilters(\n      state,\n      facet,\n      hierarchicalRootLevel\n    );\n    var numericFilters = requestBuilder._getNumericFilters(state, facet);\n    var tagFilters = requestBuilder._getTagFilters(state);\n    var additionalParams = {\n      hitsPerPage: 0,\n      page: 0,\n      analytics: false,\n      clickAnalytics: false,\n    };\n\n    if (tagFilters.length > 0) {\n      additionalParams.tagFilters = tagFilters;\n    }\n\n    var hierarchicalFacet = state.getHierarchicalFacetByName(facet);\n\n    if (hierarchicalFacet) {\n      additionalParams.facets =\n        requestBuilder._getDisjunctiveHierarchicalFacetAttribute(\n          state,\n          hierarchicalFacet,\n          hierarchicalRootLevel\n        );\n    } else {\n      additionalParams.facets = facet;\n    }\n\n    if (numericFilters.length > 0) {\n      additionalParams.numericFilters = numericFilters;\n    }\n\n    if (facetFilters.length > 0) {\n      additionalParams.facetFilters = facetFilters;\n    }\n\n    return sortObject(merge({}, state.getQueryParams(), additionalParams));\n  },\n\n  /**\n   * Return the numeric filters in an algolia request fashion\n   * @private\n   * @param {SearchParameters} state the state from which to get the filters\n   * @param {string} [facetName] the name of the attribute for which the filters should be excluded\n   * @return {string[]} the numeric filters in the algolia format\n   */\n  _getNumericFilters: function (state, facetName) {\n    if (state.numericFilters) {\n      return state.numericFilters;\n    }\n\n    var numericFilters = [];\n\n    Object.keys(state.numericRefinements).forEach(function (attribute) {\n      var operators = state.numericRefinements[attribute] || {};\n      Object.keys(operators).forEach(function (operator) {\n        var values = operators[operator] || [];\n        if (facetName !== attribute) {\n          values.forEach(function (value) {\n            if (Array.isArray(value)) {\n              var vs = value.map(function (v) {\n                return attribute + operator + v;\n              });\n              numericFilters.push(vs);\n            } else {\n              numericFilters.push(attribute + operator + value);\n            }\n          });\n        }\n      });\n    });\n\n    return numericFilters;\n  },\n\n  /**\n   * Return the tags filters depending on which format is used, either tagFilters or tagRefinements\n   * @private\n   * @param {SearchParameters} state the state from which to get the filters\n   * @return {string} Tag filters in a single string\n   */\n  _getTagFilters: function (state) {\n    if (state.tagFilters) {\n      return state.tagFilters;\n    }\n\n    return state.tagRefinements.join(',');\n  },\n\n  /**\n   * Build facetFilters parameter based on current refinements. The array returned\n   * contains strings representing the facet filters in the algolia format.\n   * @private\n   * @param  {SearchParameters} state The state from which to get the queries\n   * @param  {string} [facet] if set, the current disjunctive facet\n   * @param  {boolean} [hierarchicalRootLevel] ?? FIXME\n   * @return {array.<string>} The facet filters in the algolia format\n   */\n  _getFacetFilters: function (state, facet, hierarchicalRootLevel) {\n    var facetFilters = [];\n\n    var facetsRefinements = state.facetsRefinements || {};\n    Object.keys(facetsRefinements)\n      .sort()\n      .forEach(function (facetName) {\n        var facetValues = facetsRefinements[facetName] || [];\n        facetValues\n          .slice()\n          .sort()\n          .forEach(function (facetValue) {\n            facetFilters.push(facetName + ':' + facetValue);\n          });\n      });\n\n    var facetsExcludes = state.facetsExcludes || {};\n    Object.keys(facetsExcludes)\n      .sort()\n      .forEach(function (facetName) {\n        var facetValues = facetsExcludes[facetName] || [];\n        facetValues.sort().forEach(function (facetValue) {\n          facetFilters.push(facetName + ':-' + facetValue);\n        });\n      });\n\n    var disjunctiveFacetsRefinements = state.disjunctiveFacetsRefinements || {};\n    Object.keys(disjunctiveFacetsRefinements)\n      .sort()\n      .forEach(function (facetName) {\n        var facetValues = disjunctiveFacetsRefinements[facetName] || [];\n        if (facetName === facet || !facetValues || facetValues.length === 0) {\n          return;\n        }\n        var orFilters = [];\n\n        facetValues\n          .slice()\n          .sort()\n          .forEach(function (facetValue) {\n            orFilters.push(facetName + ':' + facetValue);\n          });\n\n        facetFilters.push(orFilters);\n      });\n\n    var hierarchicalFacetsRefinements =\n      state.hierarchicalFacetsRefinements || {};\n    Object.keys(hierarchicalFacetsRefinements)\n      .sort()\n      .forEach(function (facetName) {\n        var facetValues = hierarchicalFacetsRefinements[facetName] || [];\n        var facetValue = facetValues[0];\n\n        if (facetValue === undefined) {\n          return;\n        }\n\n        var hierarchicalFacet = state.getHierarchicalFacetByName(facetName);\n        var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n        var rootPath = state._getHierarchicalRootPath(hierarchicalFacet);\n        var attributeToRefine;\n        var attributesIndex;\n\n        // we ask for parent facet values only when the `facet` is the current hierarchical facet\n        if (facet === facetName) {\n          // if we are at the root level already, no need to ask for facet values, we get them from\n          // the hits query\n          if (\n            facetValue.indexOf(separator) === -1 ||\n            (!rootPath && hierarchicalRootLevel === true) ||\n            (rootPath &&\n              rootPath.split(separator).length ===\n                facetValue.split(separator).length)\n          ) {\n            return;\n          }\n\n          if (!rootPath) {\n            attributesIndex = facetValue.split(separator).length - 2;\n            facetValue = facetValue.slice(0, facetValue.lastIndexOf(separator));\n          } else {\n            attributesIndex = rootPath.split(separator).length - 1;\n            facetValue = rootPath;\n          }\n\n          attributeToRefine = hierarchicalFacet.attributes[attributesIndex];\n        } else {\n          attributesIndex = facetValue.split(separator).length - 1;\n\n          attributeToRefine = hierarchicalFacet.attributes[attributesIndex];\n        }\n\n        if (attributeToRefine) {\n          facetFilters.push([attributeToRefine + ':' + facetValue]);\n        }\n      });\n\n    return facetFilters;\n  },\n\n  _getHitsHierarchicalFacetsAttributes: function (state) {\n    var out = [];\n\n    return state.hierarchicalFacets.reduce(\n      // ask for as much levels as there's hierarchical refinements\n      function getHitsAttributesForHierarchicalFacet(\n        allAttributes,\n        hierarchicalFacet\n      ) {\n        var hierarchicalRefinement = state.getHierarchicalRefinement(\n          hierarchicalFacet.name\n        )[0];\n\n        // if no refinement, ask for root level\n        if (!hierarchicalRefinement) {\n          allAttributes.push(hierarchicalFacet.attributes[0]);\n          return allAttributes;\n        }\n\n        var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n        var level = hierarchicalRefinement.split(separator).length;\n        var newAttributes = hierarchicalFacet.attributes.slice(0, level + 1);\n\n        return allAttributes.concat(newAttributes);\n      },\n      out\n    );\n  },\n\n  _getDisjunctiveHierarchicalFacetAttribute: function (\n    state,\n    hierarchicalFacet,\n    rootLevel\n  ) {\n    var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n    if (rootLevel === true) {\n      var rootPath = state._getHierarchicalRootPath(hierarchicalFacet);\n      var attributeIndex = 0;\n\n      if (rootPath) {\n        attributeIndex = rootPath.split(separator).length;\n      }\n      return [hierarchicalFacet.attributes[attributeIndex]];\n    }\n\n    var hierarchicalRefinement =\n      state.getHierarchicalRefinement(hierarchicalFacet.name)[0] || '';\n    // if refinement is 'beers > IPA > Flying dog',\n    // then we want `facets: ['beers > IPA']` as disjunctive facet (parent level values)\n\n    var parentLevel = hierarchicalRefinement.split(separator).length - 1;\n    return hierarchicalFacet.attributes.slice(0, parentLevel + 1);\n  },\n\n  getSearchForFacetQuery: function (facetName, query, maxFacetHits, state) {\n    var stateForSearchForFacetValues = state.isDisjunctiveFacet(facetName)\n      ? state.clearRefinements(facetName)\n      : state;\n    var searchForFacetSearchParameters = {\n      facetQuery: query,\n      facetName: facetName,\n    };\n    if (typeof maxFacetHits === 'number') {\n      searchForFacetSearchParameters.maxFacetHits = maxFacetHits;\n    }\n    return sortObject(\n      merge(\n        {},\n        requestBuilder._getHitsSearchParams(stateForSearchForFacetValues),\n        searchForFacetSearchParameters\n      )\n    );\n  },\n};\n\nmodule.exports = requestBuilder;\n", "'use strict';\n\n// NOTE: this behaves like lodash/defaults, but doesn't mutate the target\n// it also preserve keys order\nmodule.exports = function defaultsPure() {\n  var sources = Array.prototype.slice.call(arguments);\n\n  return sources.reduceRight(function (acc, source) {\n    Object.keys(Object(source)).forEach(function (key) {\n      if (source[key] === undefined) {\n        return;\n      }\n      if (acc[key] !== undefined) {\n        // remove if already added, so that we can add it in correct order\n        delete acc[key];\n      }\n      acc[key] = source[key];\n    });\n    return acc;\n  }, {});\n};\n", "'use strict';\n\n// @MAJOR can be replaced by native Array#find when we change support\nmodule.exports = function find(array, comparator) {\n  if (!Array.isArray(array)) {\n    return undefined;\n  }\n\n  for (var i = 0; i < array.length; i++) {\n    if (comparator(array[i])) {\n      return array[i];\n    }\n  }\n\n  return undefined;\n};\n", "'use strict';\n\nfunction intersection(arr1, arr2) {\n  return arr1.filter(function (value, index) {\n    return (\n      arr2.indexOf(value) > -1 &&\n      arr1.indexOf(value) === index /* skips duplicates */\n    );\n  });\n}\n\nmodule.exports = intersection;\n", "'use strict';\n\nfunction valToNumber(v) {\n  if (typeof v === 'number') {\n    return v;\n  } else if (typeof v === 'string') {\n    return parseFloat(v);\n  } else if (Array.isArray(v)) {\n    return v.map(valToNumber);\n  }\n\n  throw new Error(\n    'The value should be a number, a parsable string or an array of those.'\n  );\n}\n\nmodule.exports = valToNumber;\n", "'use strict';\n\nmodule.exports = function isValidUserToken(userToken) {\n  if (userToken === null) {\n    return false;\n  }\n  return /^[a-zA-Z0-9_-]{1,64}$/.test(userToken);\n};\n", "'use strict';\n\n/**\n * Functions to manipulate refinement lists\n *\n * The RefinementList is not formally defined through a prototype but is based\n * on a specific structure.\n *\n * @module SearchParameters.refinementList\n *\n * @typedef {string[]} SearchParameters.refinementList.Refinements\n * @typedef {Object.<string, SearchParameters.refinementList.Refinements>} SearchParameters.refinementList.RefinementList\n */\n\nvar defaultsPure = require('../functions/defaultsPure');\nvar objectHasKeys = require('../functions/objectHasKeys');\nvar omit = require('../functions/omit');\n\nvar lib = {\n  /**\n   * Adds a refinement to a RefinementList\n   * @param {RefinementList} refinementList the initial list\n   * @param {string} attribute the attribute to refine\n   * @param {string} value the value of the refinement, if the value is not a string it will be converted\n   * @return {RefinementList} a new and updated refinement list\n   */\n  addRefinement: function addRefinement(refinementList, attribute, value) {\n    if (lib.isRefined(refinementList, attribute, value)) {\n      return refinementList;\n    }\n\n    var valueAsString = '' + value;\n\n    var facetRefinement = !refinementList[attribute]\n      ? [valueAsString]\n      : refinementList[attribute].concat(valueAsString);\n\n    var mod = {};\n\n    mod[attribute] = facetRefinement;\n\n    return defaultsPure({}, mod, refinementList);\n  },\n  /**\n   * Removes refinement(s) for an attribute:\n   *  - if the value is specified removes the refinement for the value on the attribute\n   *  - if no value is specified removes all the refinements for this attribute\n   * @param {RefinementList} refinementList the initial list\n   * @param {string} attribute the attribute to refine\n   * @param {string} [value] the value of the refinement\n   * @return {RefinementList} a new and updated refinement lst\n   */\n  removeRefinement: function removeRefinement(\n    refinementList,\n    attribute,\n    value\n  ) {\n    if (value === undefined) {\n      // we use the \"filter\" form of clearRefinement, since it leaves empty values as-is\n      // the form with a string will remove the attribute completely\n      return lib.clearRefinement(refinementList, function (v, f) {\n        return attribute === f;\n      });\n    }\n\n    var valueAsString = '' + value;\n\n    return lib.clearRefinement(refinementList, function (v, f) {\n      return attribute === f && valueAsString === v;\n    });\n  },\n  /**\n   * Toggles the refinement value for an attribute.\n   * @param {RefinementList} refinementList the initial list\n   * @param {string} attribute the attribute to refine\n   * @param {string} value the value of the refinement\n   * @return {RefinementList} a new and updated list\n   */\n  toggleRefinement: function toggleRefinement(\n    refinementList,\n    attribute,\n    value\n  ) {\n    if (value === undefined)\n      throw new Error('toggleRefinement should be used with a value');\n\n    if (lib.isRefined(refinementList, attribute, value)) {\n      return lib.removeRefinement(refinementList, attribute, value);\n    }\n\n    return lib.addRefinement(refinementList, attribute, value);\n  },\n  /**\n   * Clear all or parts of a RefinementList. Depending on the arguments, three\n   * kinds of behavior can happen:\n   *  - if no attribute is provided: clears the whole list\n   *  - if an attribute is provided as a string: clears the list for the specific attribute\n   *  - if an attribute is provided as a function: discards the elements for which the function returns true\n   * @param {RefinementList} refinementList the initial list\n   * @param {string} [attribute] the attribute or function to discard\n   * @param {string} [refinementType] optional parameter to give more context to the attribute function\n   * @return {RefinementList} a new and updated refinement list\n   */\n  clearRefinement: function clearRefinement(\n    refinementList,\n    attribute,\n    refinementType\n  ) {\n    if (attribute === undefined) {\n      // return the same object if the list is already empty\n      // this is mainly for tests, as it doesn't have much impact on performance\n      if (!objectHasKeys(refinementList)) {\n        return refinementList;\n      }\n      return {};\n    } else if (typeof attribute === 'string') {\n      return omit(refinementList, [attribute]);\n    } else if (typeof attribute === 'function') {\n      var hasChanged = false;\n\n      var newRefinementList = Object.keys(refinementList).reduce(function (\n        memo,\n        key\n      ) {\n        var values = refinementList[key] || [];\n        var facetList = values.filter(function (value) {\n          return !attribute(value, key, refinementType);\n        });\n\n        if (facetList.length !== values.length) {\n          hasChanged = true;\n        }\n\n        memo[key] = facetList;\n\n        return memo;\n      },\n      {});\n\n      if (hasChanged) return newRefinementList;\n      return refinementList;\n    }\n\n    // We return nothing if the attribute is not undefined, a string or a function,\n    // as it is not a valid value for a refinement\n    return undefined;\n  },\n  /**\n   * Test if the refinement value is used for the attribute. If no refinement value\n   * is provided, test if the refinementList contains any refinement for the\n   * given attribute.\n   * @param {RefinementList} refinementList the list of refinement\n   * @param {string} attribute name of the attribute\n   * @param {string} [refinementValue] value of the filter/refinement\n   * @return {boolean} true if the attribute is refined, false otherwise\n   */\n  isRefined: function isRefined(refinementList, attribute, refinementValue) {\n    var containsRefinements =\n      Boolean(refinementList[attribute]) &&\n      refinementList[attribute].length > 0;\n\n    if (refinementValue === undefined || !containsRefinements) {\n      return containsRefinements;\n    }\n\n    var refinementValueAsString = '' + refinementValue;\n\n    return refinementList[attribute].indexOf(refinementValueAsString) !== -1;\n  },\n};\n\nmodule.exports = lib;\n", "'use strict';\n\nvar defaultsPure = require('../functions/defaultsPure');\nvar find = require('../functions/find');\nvar intersection = require('../functions/intersection');\nvar merge = require('../functions/merge');\nvar objectHasKeys = require('../functions/objectHasKeys');\nvar omit = require('../functions/omit');\nvar valToNumber = require('../functions/valToNumber');\nvar isValidUserToken = require('../utils/isValidUserToken');\n\nvar RefinementList = require('./RefinementList');\n\n/**\n * isEqual, but only for numeric refinement values, possible values:\n * - 5\n * - [5]\n * - [[5]]\n * - [[5,5],[4]]\n * @param {any} a numeric refinement value\n * @param {any} b numeric refinement value\n * @return {boolean} true if the values are equal\n */\nfunction isEqualNumericRefinement(a, b) {\n  if (Array.isArray(a) && Array.isArray(b)) {\n    return (\n      a.length === b.length &&\n      a.every(function (el, i) {\n        return isEqualNumericRefinement(b[i], el);\n      })\n    );\n  }\n  return a === b;\n}\n\n/**\n * like _.find but using deep equality to be able to use it\n * to find arrays.\n * @private\n * @param {any[]} array array to search into (elements are base or array of base)\n * @param {any} searchedValue the value we're looking for (base or array of base)\n * @return {any} the searched value or undefined\n */\nfunction findArray(array, searchedValue) {\n  return find(array, function (currentValue) {\n    return isEqualNumericRefinement(currentValue, searchedValue);\n  });\n}\n\n/**\n * The facet list is the structure used to store the list of values used to\n * filter a single attribute.\n * @typedef {string[]} SearchParameters.FacetList\n */\n\n/**\n * Structure to store numeric filters with the operator as the key. The supported operators\n * are `=`, `>`, `<`, `>=`, `<=` and `!=`.\n * @typedef {Object.<string, Array.<number|number[]>>} SearchParameters.OperatorList\n */\n\n/**\n * SearchParameters is the data structure that contains all the information\n * usable for making a search to Algolia API. It doesn't do the search itself,\n * nor does it contains logic about the parameters.\n * It is an immutable object, therefore it has been created in a way that each\n * changes does not change the object itself but returns a copy with the\n * modification.\n * This object should probably not be instantiated outside of the helper. It will\n * be provided when needed. This object is documented for reference as you'll\n * get it from events generated by the {@link AlgoliaSearchHelper}.\n * If need be, instantiate the Helper from the factory function {@link SearchParameters.make}\n * @constructor\n * @classdesc contains all the parameters of a search\n * @param {object|SearchParameters} newParameters existing parameters or partial object\n * for the properties of a new SearchParameters\n * @see SearchParameters.make\n * @example <caption>SearchParameters of the first query in\n *   <a href=\"http://demos.algolia.com/instant-search-demo/\">the instant search demo</a></caption>\n{\n   \"query\": \"\",\n   \"disjunctiveFacets\": [\n      \"customerReviewCount\",\n      \"category\",\n      \"salePrice_range\",\n      \"manufacturer\"\n  ],\n   \"maxValuesPerFacet\": 30,\n   \"page\": 0,\n   \"hitsPerPage\": 10,\n   \"facets\": [\n      \"type\",\n      \"shipping\"\n  ]\n}\n */\nfunction SearchParameters(newParameters) {\n  var params = newParameters\n    ? SearchParameters._parseNumbers(newParameters)\n    : {};\n\n  if (params.userToken !== undefined && !isValidUserToken(params.userToken)) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      '[algoliasearch-helper] The `userToken` parameter is invalid. This can lead to wrong analytics.\\n  - Format: [a-zA-Z0-9_-]{1,64}'\n    );\n  }\n  /**\n   * This attribute contains the list of all the conjunctive facets\n   * used. This list will be added to requested facets in the\n   * [facets attribute](https://www.algolia.com/doc/rest-api/search#param-facets) sent to algolia.\n   * @member {string[]}\n   */\n  this.facets = params.facets || [];\n  /**\n   * This attribute contains the list of all the disjunctive facets\n   * used. This list will be added to requested facets in the\n   * [facets attribute](https://www.algolia.com/doc/rest-api/search#param-facets) sent to algolia.\n   * @member {string[]}\n   */\n  this.disjunctiveFacets = params.disjunctiveFacets || [];\n  /**\n   * This attribute contains the list of all the hierarchical facets\n   * used. This list will be added to requested facets in the\n   * [facets attribute](https://www.algolia.com/doc/rest-api/search#param-facets) sent to algolia.\n   * Hierarchical facets are a sub type of disjunctive facets that\n   * let you filter faceted attributes hierarchically.\n   * @member {string[]|object[]}\n   */\n  this.hierarchicalFacets = params.hierarchicalFacets || [];\n\n  // Refinements\n  /**\n   * This attribute contains all the filters that need to be\n   * applied on the conjunctive facets. Each facet must be properly\n   * defined in the `facets` attribute.\n   *\n   * The key is the name of the facet, and the `FacetList` contains all\n   * filters selected for the associated facet name.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `facetFilters` attribute.\n   * @member {Object.<string, SearchParameters.FacetList>}\n   */\n  this.facetsRefinements = params.facetsRefinements || {};\n  /**\n   * This attribute contains all the filters that need to be\n   * excluded from the conjunctive facets. Each facet must be properly\n   * defined in the `facets` attribute.\n   *\n   * The key is the name of the facet, and the `FacetList` contains all\n   * filters excluded for the associated facet name.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `facetFilters` attribute.\n   * @member {Object.<string, SearchParameters.FacetList>}\n   */\n  this.facetsExcludes = params.facetsExcludes || {};\n  /**\n   * This attribute contains all the filters that need to be\n   * applied on the disjunctive facets. Each facet must be properly\n   * defined in the `disjunctiveFacets` attribute.\n   *\n   * The key is the name of the facet, and the `FacetList` contains all\n   * filters selected for the associated facet name.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `facetFilters` attribute.\n   * @member {Object.<string, SearchParameters.FacetList>}\n   */\n  this.disjunctiveFacetsRefinements = params.disjunctiveFacetsRefinements || {};\n  /**\n   * This attribute contains all the filters that need to be\n   * applied on the numeric attributes.\n   *\n   * The key is the name of the attribute, and the value is the\n   * filters to apply to this attribute.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `numericFilters` attribute.\n   * @member {Object.<string, SearchParameters.OperatorList>}\n   */\n  this.numericRefinements = params.numericRefinements || {};\n  /**\n   * This attribute contains all the tags used to refine the query.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `tagFilters` attribute.\n   * @member {string[]}\n   */\n  this.tagRefinements = params.tagRefinements || [];\n  /**\n   * This attribute contains all the filters that need to be\n   * applied on the hierarchical facets. Each facet must be properly\n   * defined in the `hierarchicalFacets` attribute.\n   *\n   * The key is the name of the facet, and the `FacetList` contains all\n   * filters selected for the associated facet name. The FacetList values\n   * are structured as a string that contain the values for each level\n   * separated by the configured separator.\n   *\n   * When querying algolia, the values stored in this attribute will\n   * be translated into the `facetFilters` attribute.\n   * @member {Object.<string, SearchParameters.FacetList>}\n   */\n  this.hierarchicalFacetsRefinements =\n    params.hierarchicalFacetsRefinements || {};\n\n  // eslint-disable-next-line consistent-this\n  var self = this;\n  Object.keys(params).forEach(function (paramName) {\n    var isKeyKnown = SearchParameters.PARAMETERS.indexOf(paramName) !== -1;\n    var isValueDefined = params[paramName] !== undefined;\n\n    if (!isKeyKnown && isValueDefined) {\n      self[paramName] = params[paramName];\n    }\n  });\n}\n\n/**\n * List all the properties in SearchParameters and therefore all the known Algolia properties\n * This doesn't contain any beta/hidden features.\n * @private\n */\nSearchParameters.PARAMETERS = Object.keys(new SearchParameters());\n\n/**\n * @private\n * @param {object} partialState full or part of a state\n * @return {object} a new object with the number keys as number\n */\nSearchParameters._parseNumbers = function (partialState) {\n  // Do not parse numbers again in SearchParameters, they ought to be parsed already\n  if (partialState instanceof SearchParameters) return partialState;\n\n  var numbers = {};\n\n  var numberKeys = [\n    'aroundPrecision',\n    'aroundRadius',\n    'getRankingInfo',\n    'minWordSizefor2Typos',\n    'minWordSizefor1Typo',\n    'page',\n    'maxValuesPerFacet',\n    'distinct',\n    'minimumAroundRadius',\n    'hitsPerPage',\n    'minProximity',\n  ];\n\n  numberKeys.forEach(function (k) {\n    var value = partialState[k];\n    if (typeof value === 'string') {\n      var parsedValue = parseFloat(value);\n      // global isNaN is ok to use here, value is only number or NaN\n      numbers[k] = isNaN(parsedValue) ? value : parsedValue;\n    }\n  });\n\n  // there's two formats of insideBoundingBox, we need to parse\n  // the one which is an array of float geo rectangles\n  if (Array.isArray(partialState.insideBoundingBox)) {\n    numbers.insideBoundingBox = partialState.insideBoundingBox.map(function (\n      geoRect\n    ) {\n      if (Array.isArray(geoRect)) {\n        return geoRect.map(function (value) {\n          return parseFloat(value);\n        });\n      }\n      return geoRect;\n    });\n  }\n\n  if (partialState.numericRefinements) {\n    var numericRefinements = {};\n    Object.keys(partialState.numericRefinements).forEach(function (attribute) {\n      var operators = partialState.numericRefinements[attribute] || {};\n      numericRefinements[attribute] = {};\n      Object.keys(operators).forEach(function (operator) {\n        var values = operators[operator];\n        var parsedValues = values.map(function (v) {\n          if (Array.isArray(v)) {\n            return v.map(function (vPrime) {\n              if (typeof vPrime === 'string') {\n                return parseFloat(vPrime);\n              }\n              return vPrime;\n            });\n          } else if (typeof v === 'string') {\n            return parseFloat(v);\n          }\n          return v;\n        });\n        numericRefinements[attribute][operator] = parsedValues;\n      });\n    });\n    numbers.numericRefinements = numericRefinements;\n  }\n\n  return merge(partialState, numbers);\n};\n\n/**\n * Factory for SearchParameters\n * @param {object|SearchParameters} newParameters existing parameters or partial\n * object for the properties of a new SearchParameters\n * @return {SearchParameters} frozen instance of SearchParameters\n */\nSearchParameters.make = function makeSearchParameters(newParameters) {\n  var instance = new SearchParameters(newParameters);\n\n  var hierarchicalFacets = newParameters.hierarchicalFacets || [];\n  hierarchicalFacets.forEach(function (facet) {\n    if (facet.rootPath) {\n      var currentRefinement = instance.getHierarchicalRefinement(facet.name);\n\n      if (\n        currentRefinement.length > 0 &&\n        currentRefinement[0].indexOf(facet.rootPath) !== 0\n      ) {\n        instance = instance.clearRefinements(facet.name);\n      }\n\n      // get it again in case it has been cleared\n      currentRefinement = instance.getHierarchicalRefinement(facet.name);\n      if (currentRefinement.length === 0) {\n        instance = instance.toggleHierarchicalFacetRefinement(\n          facet.name,\n          facet.rootPath\n        );\n      }\n    }\n  });\n\n  return instance;\n};\n\n/**\n * Validates the new parameters based on the previous state\n * @param {SearchParameters} currentState the current state\n * @param {object|SearchParameters} parameters the new parameters to set\n * @return {Error|null} Error if the modification is invalid, null otherwise\n */\nSearchParameters.validate = function (currentState, parameters) {\n  var params = parameters || {};\n\n  if (\n    currentState.tagFilters &&\n    params.tagRefinements &&\n    params.tagRefinements.length > 0\n  ) {\n    return new Error(\n      '[Tags] Cannot switch from the managed tag API to the advanced API. It is probably ' +\n        'an error, if it is really what you want, you should first clear the tags with clearTags method.'\n    );\n  }\n\n  if (currentState.tagRefinements.length > 0 && params.tagFilters) {\n    return new Error(\n      '[Tags] Cannot switch from the advanced tag API to the managed API. It is probably ' +\n        'an error, if it is not, you should first clear the tags with clearTags method.'\n    );\n  }\n\n  if (\n    currentState.numericFilters &&\n    params.numericRefinements &&\n    objectHasKeys(params.numericRefinements)\n  ) {\n    return new Error(\n      \"[Numeric filters] Can't switch from the advanced to the managed API. It\" +\n        ' is probably an error, if this is really what you want, you have to first' +\n        ' clear the numeric filters.'\n    );\n  }\n\n  if (objectHasKeys(currentState.numericRefinements) && params.numericFilters) {\n    return new Error(\n      \"[Numeric filters] Can't switch from the managed API to the advanced. It\" +\n        ' is probably an error, if this is really what you want, you have to first' +\n        ' clear the numeric filters.'\n    );\n  }\n\n  return null;\n};\n\nSearchParameters.prototype = {\n  constructor: SearchParameters,\n\n  /**\n   * Remove all refinements (disjunctive + conjunctive + excludes + numeric filters)\n   * @method\n   * @param {undefined|string|SearchParameters.clearCallback} [attribute] optional string or function\n   * - If not given, means to clear all the filters.\n   * - If `string`, means to clear all refinements for the `attribute` named filter.\n   * - If `function`, means to clear all the refinements that return truthy values.\n   * @return {SearchParameters} new instance with filters cleared\n   */\n  clearRefinements: function clearRefinements(attribute) {\n    var patch = {\n      numericRefinements: this._clearNumericRefinements(attribute),\n      facetsRefinements: RefinementList.clearRefinement(\n        this.facetsRefinements,\n        attribute,\n        'conjunctiveFacet'\n      ),\n      facetsExcludes: RefinementList.clearRefinement(\n        this.facetsExcludes,\n        attribute,\n        'exclude'\n      ),\n      disjunctiveFacetsRefinements: RefinementList.clearRefinement(\n        this.disjunctiveFacetsRefinements,\n        attribute,\n        'disjunctiveFacet'\n      ),\n      hierarchicalFacetsRefinements: RefinementList.clearRefinement(\n        this.hierarchicalFacetsRefinements,\n        attribute,\n        'hierarchicalFacet'\n      ),\n    };\n    if (\n      patch.numericRefinements === this.numericRefinements &&\n      patch.facetsRefinements === this.facetsRefinements &&\n      patch.facetsExcludes === this.facetsExcludes &&\n      patch.disjunctiveFacetsRefinements ===\n        this.disjunctiveFacetsRefinements &&\n      patch.hierarchicalFacetsRefinements === this.hierarchicalFacetsRefinements\n    ) {\n      return this;\n    }\n    return this.setQueryParameters(patch);\n  },\n  /**\n   * Remove all the refined tags from the SearchParameters\n   * @method\n   * @return {SearchParameters} new instance with tags cleared\n   */\n  clearTags: function clearTags() {\n    if (this.tagFilters === undefined && this.tagRefinements.length === 0)\n      return this;\n\n    return this.setQueryParameters({\n      tagFilters: undefined,\n      tagRefinements: [],\n    });\n  },\n  /**\n   * Set the index.\n   * @method\n   * @param {string} index the index name\n   * @return {SearchParameters} new instance\n   */\n  setIndex: function setIndex(index) {\n    if (index === this.index) return this;\n\n    return this.setQueryParameters({\n      index: index,\n    });\n  },\n  /**\n   * Query setter\n   * @method\n   * @param {string} newQuery value for the new query\n   * @return {SearchParameters} new instance\n   */\n  setQuery: function setQuery(newQuery) {\n    if (newQuery === this.query) return this;\n\n    return this.setQueryParameters({\n      query: newQuery,\n    });\n  },\n  /**\n   * Page setter\n   * @method\n   * @param {number} newPage new page number\n   * @return {SearchParameters} new instance\n   */\n  setPage: function setPage(newPage) {\n    if (newPage === this.page) return this;\n\n    return this.setQueryParameters({\n      page: newPage,\n    });\n  },\n  /**\n   * Facets setter\n   * The facets are the simple facets, used for conjunctive (and) faceting.\n   * @method\n   * @param {string[]} facets all the attributes of the algolia records used for conjunctive faceting\n   * @return {SearchParameters} new instance\n   */\n  setFacets: function setFacets(facets) {\n    return this.setQueryParameters({\n      facets: facets,\n    });\n  },\n  /**\n   * Disjunctive facets setter\n   * Change the list of disjunctive (or) facets the helper chan handle.\n   * @method\n   * @param {string[]} facets all the attributes of the algolia records used for disjunctive faceting\n   * @return {SearchParameters} new instance\n   */\n  setDisjunctiveFacets: function setDisjunctiveFacets(facets) {\n    return this.setQueryParameters({\n      disjunctiveFacets: facets,\n    });\n  },\n  /**\n   * HitsPerPage setter\n   * Hits per page represents the number of hits retrieved for this query\n   * @method\n   * @param {number} n number of hits retrieved per page of results\n   * @return {SearchParameters} new instance\n   */\n  setHitsPerPage: function setHitsPerPage(n) {\n    if (this.hitsPerPage === n) return this;\n\n    return this.setQueryParameters({\n      hitsPerPage: n,\n    });\n  },\n  /**\n   * typoTolerance setter\n   * Set the value of typoTolerance\n   * @method\n   * @param {string} typoTolerance new value of typoTolerance (\"true\", \"false\", \"min\" or \"strict\")\n   * @return {SearchParameters} new instance\n   */\n  setTypoTolerance: function setTypoTolerance(typoTolerance) {\n    if (this.typoTolerance === typoTolerance) return this;\n\n    return this.setQueryParameters({\n      typoTolerance: typoTolerance,\n    });\n  },\n  /**\n   * Add a numeric filter for a given attribute\n   * When value is an array, they are combined with OR\n   * When value is a single value, it will combined with AND\n   * @method\n   * @param {string} attribute attribute to set the filter on\n   * @param {string} operator operator of the filter (possible values: =, >, >=, <, <=, !=)\n   * @param {number | number[]} value value of the filter\n   * @return {SearchParameters} new instance\n   * @example\n   * // for price = 50 or 40\n   * state.addNumericRefinement('price', '=', [50, 40]);\n   * @example\n   * // for size = 38 and 40\n   * state.addNumericRefinement('size', '=', 38);\n   * state.addNumericRefinement('size', '=', 40);\n   */\n  addNumericRefinement: function (attribute, operator, value) {\n    var val = valToNumber(value);\n\n    if (this.isNumericRefined(attribute, operator, val)) return this;\n\n    var mod = merge({}, this.numericRefinements);\n\n    mod[attribute] = merge({}, mod[attribute]);\n\n    if (mod[attribute][operator]) {\n      // Array copy\n      mod[attribute][operator] = mod[attribute][operator].slice();\n      // Add the element. Concat can't be used here because value can be an array.\n      mod[attribute][operator].push(val);\n    } else {\n      mod[attribute][operator] = [val];\n    }\n\n    return this.setQueryParameters({\n      numericRefinements: mod,\n    });\n  },\n  /**\n   * Get the list of conjunctive refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {string[]} list of refinements\n   */\n  getConjunctiveRefinements: function (facetName) {\n    if (!this.isConjunctiveFacet(facetName)) {\n      return [];\n    }\n    return this.facetsRefinements[facetName] || [];\n  },\n  /**\n   * Get the list of disjunctive refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {string[]} list of refinements\n   */\n  getDisjunctiveRefinements: function (facetName) {\n    if (!this.isDisjunctiveFacet(facetName)) {\n      return [];\n    }\n    return this.disjunctiveFacetsRefinements[facetName] || [];\n  },\n  /**\n   * Get the list of hierarchical refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {string[]} list of refinements\n   */\n  getHierarchicalRefinement: function (facetName) {\n    // we send an array but we currently do not support multiple\n    // hierarchicalRefinements for a hierarchicalFacet\n    return this.hierarchicalFacetsRefinements[facetName] || [];\n  },\n  /**\n   * Get the list of exclude refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {string[]} list of refinements\n   */\n  getExcludeRefinements: function (facetName) {\n    if (!this.isConjunctiveFacet(facetName)) {\n      return [];\n    }\n    return this.facetsExcludes[facetName] || [];\n  },\n\n  /**\n   * Remove all the numeric filter for a given (attribute, operator)\n   * @method\n   * @param {string} attribute attribute to set the filter on\n   * @param {string} [operator] operator of the filter (possible values: =, >, >=, <, <=, !=)\n   * @param {number} [number] the value to be removed\n   * @return {SearchParameters} new instance\n   */\n  removeNumericRefinement: function (attribute, operator, number) {\n    var paramValue = number;\n    if (paramValue !== undefined) {\n      if (!this.isNumericRefined(attribute, operator, paramValue)) {\n        return this;\n      }\n      return this.setQueryParameters({\n        numericRefinements: this._clearNumericRefinements(function (\n          value,\n          key\n        ) {\n          return (\n            key === attribute &&\n            value.op === operator &&\n            isEqualNumericRefinement(value.val, valToNumber(paramValue))\n          );\n        }),\n      });\n    } else if (operator !== undefined) {\n      if (!this.isNumericRefined(attribute, operator)) return this;\n      return this.setQueryParameters({\n        numericRefinements: this._clearNumericRefinements(function (\n          value,\n          key\n        ) {\n          return key === attribute && value.op === operator;\n        }),\n      });\n    }\n\n    if (!this.isNumericRefined(attribute)) return this;\n    return this.setQueryParameters({\n      numericRefinements: this._clearNumericRefinements(function (value, key) {\n        return key === attribute;\n      }),\n    });\n  },\n  /**\n   * Get the list of numeric refinements for a single facet\n   * @param {string} facetName name of the attribute used for faceting\n   * @return {SearchParameters.OperatorList} list of refinements\n   */\n  getNumericRefinements: function (facetName) {\n    return this.numericRefinements[facetName] || {};\n  },\n  /**\n   * Return the current refinement for the (attribute, operator)\n   * @param {string} attribute attribute in the record\n   * @param {string} operator operator applied on the refined values\n   * @return {Array.<number|number[]>} refined values\n   */\n  getNumericRefinement: function (attribute, operator) {\n    return (\n      this.numericRefinements[attribute] &&\n      this.numericRefinements[attribute][operator]\n    );\n  },\n  /**\n   * Clear numeric filters.\n   * @method\n   * @private\n   * @param {string|SearchParameters.clearCallback} [attribute] optional string or function\n   * - If not given, means to clear all the filters.\n   * - If `string`, means to clear all refinements for the `attribute` named filter.\n   * - If `function`, means to clear all the refinements that return truthy values.\n   * @return {Object.<string, OperatorList>} new numeric refinements\n   */\n  _clearNumericRefinements: function _clearNumericRefinements(attribute) {\n    if (attribute === undefined) {\n      if (!objectHasKeys(this.numericRefinements)) {\n        return this.numericRefinements;\n      }\n      return {};\n    } else if (typeof attribute === 'string') {\n      return omit(this.numericRefinements, [attribute]);\n    } else if (typeof attribute === 'function') {\n      var hasChanged = false;\n      var numericRefinements = this.numericRefinements;\n      var newNumericRefinements = Object.keys(numericRefinements).reduce(\n        function (memo, key) {\n          var operators = numericRefinements[key];\n          var operatorList = {};\n\n          operators = operators || {};\n          Object.keys(operators).forEach(function (operator) {\n            var values = operators[operator] || [];\n            var outValues = [];\n            values.forEach(function (value) {\n              var predicateResult = attribute(\n                { val: value, op: operator },\n                key,\n                'numeric'\n              );\n              if (!predicateResult) outValues.push(value);\n            });\n            if (outValues.length !== values.length) {\n              hasChanged = true;\n            }\n            operatorList[operator] = outValues;\n          });\n\n          memo[key] = operatorList;\n\n          return memo;\n        },\n        {}\n      );\n\n      if (hasChanged) return newNumericRefinements;\n      return this.numericRefinements;\n    }\n\n    // We return nothing if the attribute is not undefined, a string or a function,\n    // as it is not a valid value for a refinement\n    return undefined;\n  },\n  /**\n   * Add a facet to the facets attribute of the helper configuration, if it\n   * isn't already present.\n   * @method\n   * @param {string} facet facet name to add\n   * @return {SearchParameters} new instance\n   */\n  addFacet: function addFacet(facet) {\n    if (this.isConjunctiveFacet(facet)) {\n      return this;\n    }\n\n    return this.setQueryParameters({\n      facets: this.facets.concat([facet]),\n    });\n  },\n  /**\n   * Add a disjunctive facet to the disjunctiveFacets attribute of the helper\n   * configuration, if it isn't already present.\n   * @method\n   * @param {string} facet disjunctive facet name to add\n   * @return {SearchParameters} new instance\n   */\n  addDisjunctiveFacet: function addDisjunctiveFacet(facet) {\n    if (this.isDisjunctiveFacet(facet)) {\n      return this;\n    }\n\n    return this.setQueryParameters({\n      disjunctiveFacets: this.disjunctiveFacets.concat([facet]),\n    });\n  },\n  /**\n   * Add a hierarchical facet to the hierarchicalFacets attribute of the helper\n   * configuration.\n   * @method\n   * @param {object} hierarchicalFacet hierarchical facet to add\n   * @return {SearchParameters} new instance\n   * @throws will throw an error if a hierarchical facet with the same name was already declared\n   */\n  addHierarchicalFacet: function addHierarchicalFacet(hierarchicalFacet) {\n    if (this.isHierarchicalFacet(hierarchicalFacet.name)) {\n      throw new Error(\n        'Cannot declare two hierarchical facets with the same name: `' +\n          hierarchicalFacet.name +\n          '`'\n      );\n    }\n\n    return this.setQueryParameters({\n      hierarchicalFacets: this.hierarchicalFacets.concat([hierarchicalFacet]),\n    });\n  },\n  /**\n   * Add a refinement on a \"normal\" facet\n   * @method\n   * @param {string} facet attribute to apply the faceting on\n   * @param {string} value value of the attribute (will be converted to string)\n   * @return {SearchParameters} new instance\n   */\n  addFacetRefinement: function addFacetRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(\n        facet +\n          ' is not defined in the facets attribute of the helper configuration'\n      );\n    }\n    if (RefinementList.isRefined(this.facetsRefinements, facet, value))\n      return this;\n\n    return this.setQueryParameters({\n      facetsRefinements: RefinementList.addRefinement(\n        this.facetsRefinements,\n        facet,\n        value\n      ),\n    });\n  },\n  /**\n   * Exclude a value from a \"normal\" facet\n   * @method\n   * @param {string} facet attribute to apply the exclusion on\n   * @param {string} value value of the attribute (will be converted to string)\n   * @return {SearchParameters} new instance\n   */\n  addExcludeRefinement: function addExcludeRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(\n        facet +\n          ' is not defined in the facets attribute of the helper configuration'\n      );\n    }\n    if (RefinementList.isRefined(this.facetsExcludes, facet, value))\n      return this;\n\n    return this.setQueryParameters({\n      facetsExcludes: RefinementList.addRefinement(\n        this.facetsExcludes,\n        facet,\n        value\n      ),\n    });\n  },\n  /**\n   * Adds a refinement on a disjunctive facet.\n   * @method\n   * @param {string} facet attribute to apply the faceting on\n   * @param {string} value value of the attribute (will be converted to string)\n   * @return {SearchParameters} new instance\n   */\n  addDisjunctiveFacetRefinement: function addDisjunctiveFacetRefinement(\n    facet,\n    value\n  ) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      throw new Error(\n        facet +\n          ' is not defined in the disjunctiveFacets attribute of the helper configuration'\n      );\n    }\n\n    if (\n      RefinementList.isRefined(this.disjunctiveFacetsRefinements, facet, value)\n    )\n      return this;\n\n    return this.setQueryParameters({\n      disjunctiveFacetsRefinements: RefinementList.addRefinement(\n        this.disjunctiveFacetsRefinements,\n        facet,\n        value\n      ),\n    });\n  },\n  /**\n   * addTagRefinement adds a tag to the list used to filter the results\n   * @param {string} tag tag to be added\n   * @return {SearchParameters} new instance\n   */\n  addTagRefinement: function addTagRefinement(tag) {\n    if (this.isTagRefined(tag)) return this;\n\n    var modification = {\n      tagRefinements: this.tagRefinements.concat(tag),\n    };\n\n    return this.setQueryParameters(modification);\n  },\n  /**\n   * Remove a facet from the facets attribute of the helper configuration, if it\n   * is present.\n   * @method\n   * @param {string} facet facet name to remove\n   * @return {SearchParameters} new instance\n   */\n  removeFacet: function removeFacet(facet) {\n    if (!this.isConjunctiveFacet(facet)) {\n      return this;\n    }\n\n    return this.clearRefinements(facet).setQueryParameters({\n      facets: this.facets.filter(function (f) {\n        return f !== facet;\n      }),\n    });\n  },\n  /**\n   * Remove a disjunctive facet from the disjunctiveFacets attribute of the\n   * helper configuration, if it is present.\n   * @method\n   * @param {string} facet disjunctive facet name to remove\n   * @return {SearchParameters} new instance\n   */\n  removeDisjunctiveFacet: function removeDisjunctiveFacet(facet) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      return this;\n    }\n\n    return this.clearRefinements(facet).setQueryParameters({\n      disjunctiveFacets: this.disjunctiveFacets.filter(function (f) {\n        return f !== facet;\n      }),\n    });\n  },\n  /**\n   * Remove a hierarchical facet from the hierarchicalFacets attribute of the\n   * helper configuration, if it is present.\n   * @method\n   * @param {string} facet hierarchical facet name to remove\n   * @return {SearchParameters} new instance\n   */\n  removeHierarchicalFacet: function removeHierarchicalFacet(facet) {\n    if (!this.isHierarchicalFacet(facet)) {\n      return this;\n    }\n\n    return this.clearRefinements(facet).setQueryParameters({\n      hierarchicalFacets: this.hierarchicalFacets.filter(function (f) {\n        return f.name !== facet;\n      }),\n    });\n  },\n  /**\n   * Remove a refinement set on facet. If a value is provided, it will clear the\n   * refinement for the given value, otherwise it will clear all the refinement\n   * values for the faceted attribute.\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {string} [value] value used to filter\n   * @return {SearchParameters} new instance\n   */\n  removeFacetRefinement: function removeFacetRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(\n        facet +\n          ' is not defined in the facets attribute of the helper configuration'\n      );\n    }\n    if (!RefinementList.isRefined(this.facetsRefinements, facet, value))\n      return this;\n\n    return this.setQueryParameters({\n      facetsRefinements: RefinementList.removeRefinement(\n        this.facetsRefinements,\n        facet,\n        value\n      ),\n    });\n  },\n  /**\n   * Remove a negative refinement on a facet\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {string} value value used to filter\n   * @return {SearchParameters} new instance\n   */\n  removeExcludeRefinement: function removeExcludeRefinement(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(\n        facet +\n          ' is not defined in the facets attribute of the helper configuration'\n      );\n    }\n    if (!RefinementList.isRefined(this.facetsExcludes, facet, value))\n      return this;\n\n    return this.setQueryParameters({\n      facetsExcludes: RefinementList.removeRefinement(\n        this.facetsExcludes,\n        facet,\n        value\n      ),\n    });\n  },\n  /**\n   * Remove a refinement on a disjunctive facet\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {string} value value used to filter\n   * @return {SearchParameters} new instance\n   */\n  removeDisjunctiveFacetRefinement: function removeDisjunctiveFacetRefinement(\n    facet,\n    value\n  ) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      throw new Error(\n        facet +\n          ' is not defined in the disjunctiveFacets attribute of the helper configuration'\n      );\n    }\n    if (\n      !RefinementList.isRefined(this.disjunctiveFacetsRefinements, facet, value)\n    )\n      return this;\n\n    return this.setQueryParameters({\n      disjunctiveFacetsRefinements: RefinementList.removeRefinement(\n        this.disjunctiveFacetsRefinements,\n        facet,\n        value\n      ),\n    });\n  },\n  /**\n   * Remove a tag from the list of tag refinements\n   * @method\n   * @param {string} tag the tag to remove\n   * @return {SearchParameters} new instance\n   */\n  removeTagRefinement: function removeTagRefinement(tag) {\n    if (!this.isTagRefined(tag)) return this;\n\n    var modification = {\n      tagRefinements: this.tagRefinements.filter(function (t) {\n        return t !== tag;\n      }),\n    };\n\n    return this.setQueryParameters(modification);\n  },\n  /**\n   * Generic toggle refinement method to use with facet, disjunctive facets\n   * and hierarchical facets\n   * @param  {string} facet the facet to refine\n   * @param  {string} value the associated value\n   * @return {SearchParameters} new instance\n   * @throws will throw an error if the facet is not declared in the settings of the helper\n   * @deprecated since version 2.19.0, see {@link SearchParameters#toggleFacetRefinement}\n   */\n  toggleRefinement: function toggleRefinement(facet, value) {\n    return this.toggleFacetRefinement(facet, value);\n  },\n  /**\n   * Generic toggle refinement method to use with facet, disjunctive facets\n   * and hierarchical facets\n   * @param  {string} facet the facet to refine\n   * @param  {string} value the associated value\n   * @return {SearchParameters} new instance\n   * @throws will throw an error if the facet is not declared in the settings of the helper\n   */\n  toggleFacetRefinement: function toggleFacetRefinement(facet, value) {\n    if (this.isHierarchicalFacet(facet)) {\n      return this.toggleHierarchicalFacetRefinement(facet, value);\n    } else if (this.isConjunctiveFacet(facet)) {\n      return this.toggleConjunctiveFacetRefinement(facet, value);\n    } else if (this.isDisjunctiveFacet(facet)) {\n      return this.toggleDisjunctiveFacetRefinement(facet, value);\n    }\n\n    throw new Error(\n      'Cannot refine the undeclared facet ' +\n        facet +\n        '; it should be added to the helper options facets, disjunctiveFacets or hierarchicalFacets'\n    );\n  },\n  /**\n   * Switch the refinement applied over a facet/value\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {SearchParameters} new instance\n   */\n  toggleConjunctiveFacetRefinement: function toggleConjunctiveFacetRefinement(\n    facet,\n    value\n  ) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(\n        facet +\n          ' is not defined in the facets attribute of the helper configuration'\n      );\n    }\n\n    return this.setQueryParameters({\n      facetsRefinements: RefinementList.toggleRefinement(\n        this.facetsRefinements,\n        facet,\n        value\n      ),\n    });\n  },\n  /**\n   * Switch the refinement applied over a facet/value\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {SearchParameters} new instance\n   */\n  toggleExcludeFacetRefinement: function toggleExcludeFacetRefinement(\n    facet,\n    value\n  ) {\n    if (!this.isConjunctiveFacet(facet)) {\n      throw new Error(\n        facet +\n          ' is not defined in the facets attribute of the helper configuration'\n      );\n    }\n\n    return this.setQueryParameters({\n      facetsExcludes: RefinementList.toggleRefinement(\n        this.facetsExcludes,\n        facet,\n        value\n      ),\n    });\n  },\n  /**\n   * Switch the refinement applied over a facet/value\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {SearchParameters} new instance\n   */\n  toggleDisjunctiveFacetRefinement: function toggleDisjunctiveFacetRefinement(\n    facet,\n    value\n  ) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      throw new Error(\n        facet +\n          ' is not defined in the disjunctiveFacets attribute of the helper configuration'\n      );\n    }\n\n    return this.setQueryParameters({\n      disjunctiveFacetsRefinements: RefinementList.toggleRefinement(\n        this.disjunctiveFacetsRefinements,\n        facet,\n        value\n      ),\n    });\n  },\n  /**\n   * Switch the refinement applied over a facet/value\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {SearchParameters} new instance\n   */\n  toggleHierarchicalFacetRefinement: function toggleHierarchicalFacetRefinement(\n    facet,\n    value\n  ) {\n    if (!this.isHierarchicalFacet(facet)) {\n      throw new Error(\n        facet +\n          ' is not defined in the hierarchicalFacets attribute of the helper configuration'\n      );\n    }\n\n    var separator = this._getHierarchicalFacetSeparator(\n      this.getHierarchicalFacetByName(facet)\n    );\n\n    var mod = {};\n\n    var upOneOrMultipleLevel =\n      this.hierarchicalFacetsRefinements[facet] !== undefined &&\n      this.hierarchicalFacetsRefinements[facet].length > 0 &&\n      // remove current refinement:\n      // refinement was 'beer > IPA', call is toggleRefine('beer > IPA'), refinement should be `beer`\n      (this.hierarchicalFacetsRefinements[facet][0] === value ||\n        // remove a parent refinement of the current refinement:\n        //  - refinement was 'beer > IPA > Flying dog'\n        //  - call is toggleRefine('beer > IPA')\n        //  - refinement should be `beer`\n        this.hierarchicalFacetsRefinements[facet][0].indexOf(\n          value + separator\n        ) === 0);\n\n    if (upOneOrMultipleLevel) {\n      if (value.indexOf(separator) === -1) {\n        // go back to root level\n        mod[facet] = [];\n      } else {\n        mod[facet] = [value.slice(0, value.lastIndexOf(separator))];\n      }\n    } else {\n      mod[facet] = [value];\n    }\n\n    return this.setQueryParameters({\n      hierarchicalFacetsRefinements: defaultsPure(\n        {},\n        mod,\n        this.hierarchicalFacetsRefinements\n      ),\n    });\n  },\n\n  /**\n   * Adds a refinement on a hierarchical facet.\n   * @param {string} facet the facet name\n   * @param {string} path the hierarchical facet path\n   * @return {SearchParameter} the new state\n   * @throws Error if the facet is not defined or if the facet is refined\n   */\n  addHierarchicalFacetRefinement: function (facet, path) {\n    if (this.isHierarchicalFacetRefined(facet)) {\n      throw new Error(facet + ' is already refined.');\n    }\n    if (!this.isHierarchicalFacet(facet)) {\n      throw new Error(\n        facet +\n          ' is not defined in the hierarchicalFacets attribute of the helper configuration.'\n      );\n    }\n    var mod = {};\n    mod[facet] = [path];\n    return this.setQueryParameters({\n      hierarchicalFacetsRefinements: defaultsPure(\n        {},\n        mod,\n        this.hierarchicalFacetsRefinements\n      ),\n    });\n  },\n\n  /**\n   * Removes the refinement set on a hierarchical facet.\n   * @param {string} facet the facet name\n   * @return {SearchParameter} the new state\n   * @throws Error if the facet is not defined or if the facet is not refined\n   */\n  removeHierarchicalFacetRefinement: function (facet) {\n    if (!this.isHierarchicalFacetRefined(facet)) {\n      return this;\n    }\n    var mod = {};\n    mod[facet] = [];\n    return this.setQueryParameters({\n      hierarchicalFacetsRefinements: defaultsPure(\n        {},\n        mod,\n        this.hierarchicalFacetsRefinements\n      ),\n    });\n  },\n  /**\n   * Switch the tag refinement\n   * @method\n   * @param {string} tag the tag to remove or add\n   * @return {SearchParameters} new instance\n   */\n  toggleTagRefinement: function toggleTagRefinement(tag) {\n    if (this.isTagRefined(tag)) {\n      return this.removeTagRefinement(tag);\n    }\n\n    return this.addTagRefinement(tag);\n  },\n  /**\n   * Test if the facet name is from one of the disjunctive facets\n   * @method\n   * @param {string} facet facet name to test\n   * @return {boolean} true if facet is a disjunctive facet\n   */\n  isDisjunctiveFacet: function (facet) {\n    return this.disjunctiveFacets.indexOf(facet) > -1;\n  },\n  /**\n   * Test if the facet name is from one of the hierarchical facets\n   * @method\n   * @param {string} facetName facet name to test\n   * @return {boolean} true if facetName is a hierarchical facet\n   */\n  isHierarchicalFacet: function (facetName) {\n    return this.getHierarchicalFacetByName(facetName) !== undefined;\n  },\n  /**\n   * Test if the facet name is from one of the conjunctive/normal facets\n   * @method\n   * @param {string} facet facet name to test\n   * @return {boolean} true if facet is a conjunctive facet\n   */\n  isConjunctiveFacet: function (facet) {\n    return this.facets.indexOf(facet) > -1;\n  },\n  /**\n   * Returns true if the facet is refined, either for a specific value or in\n   * general.\n   * @method\n   * @param {string} facet name of the attribute for used for faceting\n   * @param {string} value, optional value. If passed will test that this value\n   * is filtering the given facet.\n   * @return {boolean} returns true if refined\n   */\n  isFacetRefined: function isFacetRefined(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      return false;\n    }\n    return RefinementList.isRefined(this.facetsRefinements, facet, value);\n  },\n  /**\n   * Returns true if the facet contains exclusions or if a specific value is\n   * excluded.\n   *\n   * @method\n   * @param {string} facet name of the attribute for used for faceting\n   * @param {string} [value] optional value. If passed will test that this value\n   * is filtering the given facet.\n   * @return {boolean} returns true if refined\n   */\n  isExcludeRefined: function isExcludeRefined(facet, value) {\n    if (!this.isConjunctiveFacet(facet)) {\n      return false;\n    }\n    return RefinementList.isRefined(this.facetsExcludes, facet, value);\n  },\n  /**\n   * Returns true if the facet contains a refinement, or if a value passed is a\n   * refinement for the facet.\n   * @method\n   * @param {string} facet name of the attribute for used for faceting\n   * @param {string} value optional, will test if the value is used for refinement\n   * if there is one, otherwise will test if the facet contains any refinement\n   * @return {boolean} true if the facet is refined\n   */\n  isDisjunctiveFacetRefined: function isDisjunctiveFacetRefined(facet, value) {\n    if (!this.isDisjunctiveFacet(facet)) {\n      return false;\n    }\n    return RefinementList.isRefined(\n      this.disjunctiveFacetsRefinements,\n      facet,\n      value\n    );\n  },\n  /**\n   * Returns true if the facet contains a refinement, or if a value passed is a\n   * refinement for the facet.\n   * @method\n   * @param {string} facet name of the attribute for used for faceting\n   * @param {string} value optional, will test if the value is used for refinement\n   * if there is one, otherwise will test if the facet contains any refinement\n   * @return {boolean} true if the facet is refined\n   */\n  isHierarchicalFacetRefined: function isHierarchicalFacetRefined(\n    facet,\n    value\n  ) {\n    if (!this.isHierarchicalFacet(facet)) {\n      return false;\n    }\n\n    var refinements = this.getHierarchicalRefinement(facet);\n\n    if (!value) {\n      return refinements.length > 0;\n    }\n\n    return refinements.indexOf(value) !== -1;\n  },\n  /**\n   * Test if the triple (attribute, operator, value) is already refined.\n   * If only the attribute and the operator are provided, it tests if the\n   * contains any refinement value.\n   * @method\n   * @param {string} attribute attribute for which the refinement is applied\n   * @param {string} [operator] operator of the refinement\n   * @param {string} [value] value of the refinement\n   * @return {boolean} true if it is refined\n   */\n  isNumericRefined: function isNumericRefined(attribute, operator, value) {\n    if (value === undefined && operator === undefined) {\n      return Boolean(this.numericRefinements[attribute]);\n    }\n\n    var isOperatorDefined =\n      this.numericRefinements[attribute] &&\n      this.numericRefinements[attribute][operator] !== undefined;\n\n    if (value === undefined || !isOperatorDefined) {\n      return isOperatorDefined;\n    }\n\n    var parsedValue = valToNumber(value);\n    var isAttributeValueDefined =\n      findArray(this.numericRefinements[attribute][operator], parsedValue) !==\n      undefined;\n\n    return isOperatorDefined && isAttributeValueDefined;\n  },\n  /**\n   * Returns true if the tag refined, false otherwise\n   * @method\n   * @param {string} tag the tag to check\n   * @return {boolean} true if tag is refined\n   */\n  isTagRefined: function isTagRefined(tag) {\n    return this.tagRefinements.indexOf(tag) !== -1;\n  },\n  /**\n   * Returns the list of all disjunctive facets refined\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {string[]} returns the list of refinements\n   */\n  getRefinedDisjunctiveFacets: function getRefinedDisjunctiveFacets() {\n    // eslint-disable-next-line consistent-this\n    var self = this;\n\n    // attributes used for numeric filter can also be disjunctive\n    var disjunctiveNumericRefinedFacets = intersection(\n      Object.keys(this.numericRefinements).filter(function (facet) {\n        return Object.keys(self.numericRefinements[facet]).length > 0;\n      }),\n      this.disjunctiveFacets\n    );\n\n    return Object.keys(this.disjunctiveFacetsRefinements)\n      .filter(function (facet) {\n        return self.disjunctiveFacetsRefinements[facet].length > 0;\n      })\n      .concat(disjunctiveNumericRefinedFacets)\n      .concat(this.getRefinedHierarchicalFacets())\n      .sort();\n  },\n  /**\n   * Returns the list of all disjunctive facets refined\n   * @method\n   * @param {string} facet name of the attribute used for faceting\n   * @param {value} value value used for filtering\n   * @return {string[]} returns the list of refinements\n   */\n  getRefinedHierarchicalFacets: function getRefinedHierarchicalFacets() {\n    // eslint-disable-next-line consistent-this\n    var self = this;\n    return intersection(\n      // enforce the order between the two arrays,\n      // so that refinement name index === hierarchical facet index\n      this.hierarchicalFacets.map(function (facet) {\n        return facet.name;\n      }),\n      Object.keys(this.hierarchicalFacetsRefinements).filter(function (facet) {\n        return self.hierarchicalFacetsRefinements[facet].length > 0;\n      })\n    ).sort();\n  },\n  /**\n   * Returned the list of all disjunctive facets not refined\n   * @method\n   * @return {string[]} returns the list of facets that are not refined\n   */\n  getUnrefinedDisjunctiveFacets: function () {\n    var refinedFacets = this.getRefinedDisjunctiveFacets();\n\n    return this.disjunctiveFacets.filter(function (f) {\n      return refinedFacets.indexOf(f) === -1;\n    });\n  },\n\n  managedParameters: [\n    'index',\n\n    'facets',\n    'disjunctiveFacets',\n    'facetsRefinements',\n    'hierarchicalFacets',\n    'facetsExcludes',\n\n    'disjunctiveFacetsRefinements',\n    'numericRefinements',\n    'tagRefinements',\n    'hierarchicalFacetsRefinements',\n  ],\n\n  getQueryParams: function getQueryParams() {\n    var managedParameters = this.managedParameters;\n\n    var queryParams = {};\n\n    // eslint-disable-next-line consistent-this\n    var self = this;\n    Object.keys(this).forEach(function (paramName) {\n      var paramValue = self[paramName];\n      if (\n        managedParameters.indexOf(paramName) === -1 &&\n        paramValue !== undefined\n      ) {\n        queryParams[paramName] = paramValue;\n      }\n    });\n\n    return queryParams;\n  },\n  /**\n   * Let the user set a specific value for a given parameter. Will return the\n   * same instance if the parameter is invalid or if the value is the same as the\n   * previous one.\n   * @method\n   * @param {string} parameter the parameter name\n   * @param {any} value the value to be set, must be compliant with the definition\n   * of the attribute on the object\n   * @return {SearchParameters} the updated state\n   */\n  setQueryParameter: function setParameter(parameter, value) {\n    if (this[parameter] === value) return this;\n\n    var modification = {};\n\n    modification[parameter] = value;\n\n    return this.setQueryParameters(modification);\n  },\n  /**\n   * Let the user set any of the parameters with a plain object.\n   * @method\n   * @param {object} params all the keys and the values to be updated\n   * @return {SearchParameters} a new updated instance\n   */\n  setQueryParameters: function setQueryParameters(params) {\n    if (!params) return this;\n\n    var error = SearchParameters.validate(this, params);\n\n    if (error) {\n      throw error;\n    }\n\n    // eslint-disable-next-line consistent-this\n    var self = this;\n    var nextWithNumbers = SearchParameters._parseNumbers(params);\n    var previousPlainObject = Object.keys(this).reduce(function (acc, key) {\n      acc[key] = self[key];\n      return acc;\n    }, {});\n\n    var nextPlainObject = Object.keys(nextWithNumbers).reduce(function (\n      previous,\n      key\n    ) {\n      var isPreviousValueDefined = previous[key] !== undefined;\n      var isNextValueDefined = nextWithNumbers[key] !== undefined;\n\n      if (isPreviousValueDefined && !isNextValueDefined) {\n        return omit(previous, [key]);\n      }\n\n      if (isNextValueDefined) {\n        previous[key] = nextWithNumbers[key];\n      }\n\n      return previous;\n    },\n    previousPlainObject);\n\n    return new this.constructor(nextPlainObject);\n  },\n\n  /**\n   * Returns a new instance with the page reset. Two scenarios possible:\n   * the page is omitted -> return the given instance\n   * the page is set -> return a new instance with a page of 0\n   * @return {SearchParameters} a new updated instance\n   */\n  resetPage: function () {\n    if (this.page === undefined) {\n      return this;\n    }\n\n    return this.setPage(0);\n  },\n\n  /**\n   * Helper function to get the hierarchicalFacet separator or the default one (`>`)\n   * @param  {object} hierarchicalFacet the hierarchicalFacet object\n   * @return {string} returns the hierarchicalFacet.separator or `>` as default\n   */\n  _getHierarchicalFacetSortBy: function (hierarchicalFacet) {\n    return hierarchicalFacet.sortBy || ['isRefined:desc', 'name:asc'];\n  },\n\n  /**\n   * Helper function to get the hierarchicalFacet separator or the default one (`>`)\n   * @private\n   * @param  {object} hierarchicalFacet the hierarchicalFacet object\n   * @return {string} returns the hierarchicalFacet.separator or `>` as default\n   */\n  _getHierarchicalFacetSeparator: function (hierarchicalFacet) {\n    return hierarchicalFacet.separator || ' > ';\n  },\n\n  /**\n   * Helper function to get the hierarchicalFacet prefix path or null\n   * @private\n   * @param  {object} hierarchicalFacet the hierarchicalFacet object\n   * @return {string} returns the hierarchicalFacet.rootPath or null as default\n   */\n  _getHierarchicalRootPath: function (hierarchicalFacet) {\n    return hierarchicalFacet.rootPath || null;\n  },\n\n  /**\n   * Helper function to check if we show the parent level of the hierarchicalFacet\n   * @private\n   * @param  {object} hierarchicalFacet the hierarchicalFacet object\n   * @return {string} returns the hierarchicalFacet.showParentLevel or true as default\n   */\n  _getHierarchicalShowParentLevel: function (hierarchicalFacet) {\n    if (typeof hierarchicalFacet.showParentLevel === 'boolean') {\n      return hierarchicalFacet.showParentLevel;\n    }\n    return true;\n  },\n\n  /**\n   * Helper function to get the hierarchicalFacet by it's name\n   * @param  {string} hierarchicalFacetName the hierarchicalFacet name\n   * @return {object} a hierarchicalFacet\n   */\n  getHierarchicalFacetByName: function (hierarchicalFacetName) {\n    return find(this.hierarchicalFacets, function (f) {\n      return f.name === hierarchicalFacetName;\n    });\n  },\n\n  /**\n   * Get the current breadcrumb for a hierarchical facet, as an array\n   * @param  {string} facetName Hierarchical facet name\n   * @return {array.<string>} the path as an array of string\n   */\n  getHierarchicalFacetBreadcrumb: function (facetName) {\n    if (!this.isHierarchicalFacet(facetName)) {\n      return [];\n    }\n\n    var refinement = this.getHierarchicalRefinement(facetName)[0];\n    if (!refinement) return [];\n\n    var separator = this._getHierarchicalFacetSeparator(\n      this.getHierarchicalFacetByName(facetName)\n    );\n    var path = refinement.split(separator);\n    return path.map(function (part) {\n      return part.trim();\n    });\n  },\n\n  toString: function () {\n    return JSON.stringify(this, null, 2);\n  },\n};\n\n/**\n * Callback used for clearRefinement method\n * @callback SearchParameters.clearCallback\n * @param {OperatorList|FacetList} value the value of the filter\n * @param {string} key the current attribute name\n * @param {string} type `numeric`, `disjunctiveFacet`, `conjunctiveFacet`, `hierarchicalFacet` or `exclude`\n * depending on the type of facet\n * @return {boolean} `true` if the element should be removed. `false` otherwise.\n */\nmodule.exports = SearchParameters;\n", "'use strict';\n\nmodule.exports = function compact(array) {\n  if (!Array.isArray(array)) {\n    return [];\n  }\n\n  return array.filter(Boolean);\n};\n", "'use strict';\n\n// @MAJOR can be replaced by native Array#findIndex when we change support\nmodule.exports = function find(array, comparator) {\n  if (!Array.isArray(array)) {\n    return -1;\n  }\n\n  for (var i = 0; i < array.length; i++) {\n    if (comparator(array[i])) {\n      return i;\n    }\n  }\n  return -1;\n};\n", "'use strict';\n\nvar find = require('./find');\n\n/**\n * Transform sort format from user friendly notation to lodash format\n * @param {string[]} sortBy array of predicate of the form \"attribute:order\"\n * @param {string[]} [defaults] array of predicate of the form \"attribute:order\"\n * @return {array.<string[]>} array containing 2 elements : attributes, orders\n */\nmodule.exports = function formatSort(sortBy, defaults) {\n  var defaultInstructions = (defaults || []).map(function (sort) {\n    return sort.split(':');\n  });\n\n  return sortBy.reduce(\n    function preparePredicate(out, sort) {\n      var sortInstruction = sort.split(':');\n\n      var matchingDefault = find(\n        defaultInstructions,\n        function (defaultInstruction) {\n          return defaultInstruction[0] === sortInstruction[0];\n        }\n      );\n\n      if (sortInstruction.length > 1 || !matchingDefault) {\n        out[0].push(sortInstruction[0]);\n        out[1].push(sortInstruction[1]);\n        return out;\n      }\n\n      out[0].push(matchingDefault[0]);\n      out[1].push(matchingDefault[1]);\n      return out;\n    },\n    [[], []]\n  );\n};\n", "'use strict';\n\nfunction compareAscending(value, other) {\n  if (value !== other) {\n    var valIsDefined = value !== undefined;\n    var valIsNull = value === null;\n\n    var othIsDefined = other !== undefined;\n    var othIsNull = other === null;\n\n    if (\n      (!othIsNull && value > other) ||\n      (valIsNull && othIsDefined) ||\n      !valIsDefined\n    ) {\n      return 1;\n    }\n    if (\n      (!valIsNull && value < other) ||\n      (othIsNull && valIsDefined) ||\n      !othIsDefined\n    ) {\n      return -1;\n    }\n  }\n  return 0;\n}\n\n/**\n * @param {Array<object>} collection object with keys in attributes\n * @param {Array<string>} iteratees attributes\n * @param {Array<string>} orders asc | desc\n * @return {Array<object>} sorted collection\n */\nfunction orderBy(collection, iteratees, orders) {\n  if (!Array.isArray(collection)) {\n    return [];\n  }\n\n  if (!Array.isArray(orders)) {\n    orders = [];\n  }\n\n  var result = collection.map(function (value, index) {\n    return {\n      criteria: iteratees.map(function (iteratee) {\n        return value[iteratee];\n      }),\n      index: index,\n      value: value,\n    };\n  });\n\n  result.sort(function comparer(object, other) {\n    var index = -1;\n\n    while (++index < object.criteria.length) {\n      var res = compareAscending(object.criteria[index], other.criteria[index]);\n      if (res) {\n        if (index >= orders.length) {\n          return res;\n        }\n        if (orders[index] === 'desc') {\n          return -res;\n        }\n        return res;\n      }\n    }\n\n    // This ensures a stable sort in V8 and other engines.\n    // See https://bugs.chromium.org/p/v8/issues/detail?id=90 for more details.\n    return object.index - other.index;\n  });\n\n  return result.map(function (res) {\n    return res.value;\n  });\n}\n\nmodule.exports = orderBy;\n", "'use strict';\n\nmodule.exports = generateTrees;\n\nvar fv = require('../functions/escapeFacetValue');\nvar find = require('../functions/find');\nvar prepareHierarchicalFacetSortBy = require('../functions/formatSort');\nvar orderBy = require('../functions/orderBy');\nvar escapeFacetValue = fv.escapeFacetValue;\nvar unescapeFacetValue = fv.unescapeFacetValue;\n\nfunction generateTrees(state) {\n  return function generate(hierarchicalFacetResult, hierarchicalFacetIndex) {\n    var hierarchicalFacet = state.hierarchicalFacets[hierarchicalFacetIndex];\n    var hierarchicalFacetRefinement =\n      (state.hierarchicalFacetsRefinements[hierarchicalFacet.name] &&\n        state.hierarchicalFacetsRefinements[hierarchicalFacet.name][0]) ||\n      '';\n    var hierarchicalSeparator =\n      state._getHierarchicalFacetSeparator(hierarchicalFacet);\n    var hierarchicalRootPath =\n      state._getHierarchicalRootPath(hierarchicalFacet);\n    var hierarchicalShowParentLevel =\n      state._getHierarchicalShowParentLevel(hierarchicalFacet);\n    var sortBy = prepareHierarchicalFacetSortBy(\n      state._getHierarchicalFacetSortBy(hierarchicalFacet)\n    );\n\n    var rootExhaustive = hierarchicalFacetResult.every(function (facetResult) {\n      return facetResult.exhaustive;\n    });\n\n    var generateTreeFn = generateHierarchicalTree(\n      sortBy,\n      hierarchicalSeparator,\n      hierarchicalRootPath,\n      hierarchicalShowParentLevel,\n      hierarchicalFacetRefinement\n    );\n\n    var results = hierarchicalFacetResult;\n\n    if (hierarchicalRootPath) {\n      results = hierarchicalFacetResult.slice(\n        hierarchicalRootPath.split(hierarchicalSeparator).length\n      );\n    }\n\n    return results.reduce(generateTreeFn, {\n      name: state.hierarchicalFacets[hierarchicalFacetIndex].name,\n      count: null, // root level, no count\n      isRefined: true, // root level, always refined\n      path: null, // root level, no path\n      escapedValue: null,\n      exhaustive: rootExhaustive,\n      data: null,\n    });\n  };\n}\n\nfunction generateHierarchicalTree(\n  sortBy,\n  hierarchicalSeparator,\n  hierarchicalRootPath,\n  hierarchicalShowParentLevel,\n  currentRefinement\n) {\n  return function generateTree(\n    hierarchicalTree,\n    hierarchicalFacetResult,\n    currentHierarchicalLevel\n  ) {\n    var parent = hierarchicalTree;\n\n    if (currentHierarchicalLevel > 0) {\n      var level = 0;\n\n      parent = hierarchicalTree;\n\n      while (level < currentHierarchicalLevel) {\n        /**\n         * @type {object[]]} hierarchical data\n         */\n        var data = parent && Array.isArray(parent.data) ? parent.data : [];\n        parent = find(data, function (subtree) {\n          return subtree.isRefined;\n        });\n        level++;\n      }\n    }\n\n    // we found a refined parent, let's add current level data under it\n    if (parent) {\n      // filter values in case an object has multiple categories:\n      //   {\n      //     categories: {\n      //       level0: ['beers', 'bières'],\n      //       level1: ['beers > IPA', 'bières > Belges']\n      //     }\n      //   }\n      //\n      // If parent refinement is `beers`, then we do not want to have `bières > Belges`\n      // showing up\n\n      var picked = Object.keys(hierarchicalFacetResult.data)\n        .map(function (facetValue) {\n          return [facetValue, hierarchicalFacetResult.data[facetValue]];\n        })\n        .filter(function (tuple) {\n          var facetValue = tuple[0];\n          return onlyMatchingTree(\n            facetValue,\n            parent.path || hierarchicalRootPath,\n            currentRefinement,\n            hierarchicalSeparator,\n            hierarchicalRootPath,\n            hierarchicalShowParentLevel\n          );\n        });\n\n      parent.data = orderBy(\n        picked.map(function (tuple) {\n          var facetValue = tuple[0];\n          var facetCount = tuple[1];\n\n          return format(\n            facetCount,\n            facetValue,\n            hierarchicalSeparator,\n            unescapeFacetValue(currentRefinement),\n            hierarchicalFacetResult.exhaustive\n          );\n        }),\n        sortBy[0],\n        sortBy[1]\n      );\n    }\n\n    return hierarchicalTree;\n  };\n}\n\n// eslint-disable-next-line max-params\nfunction onlyMatchingTree(\n  facetValue,\n  parentPath,\n  currentRefinement,\n  hierarchicalSeparator,\n  hierarchicalRootPath,\n  hierarchicalShowParentLevel\n) {\n  // we want the facetValue is a child of hierarchicalRootPath\n  if (\n    hierarchicalRootPath &&\n    (facetValue.indexOf(hierarchicalRootPath) !== 0 ||\n      hierarchicalRootPath === facetValue)\n  ) {\n    return false;\n  }\n\n  // we always want root levels (only when there is no prefix path)\n  return (\n    (!hierarchicalRootPath &&\n      facetValue.indexOf(hierarchicalSeparator) === -1) ||\n    // if there is a rootPath, being root level mean 1 level under rootPath\n    (hierarchicalRootPath &&\n      facetValue.split(hierarchicalSeparator).length -\n        hierarchicalRootPath.split(hierarchicalSeparator).length ===\n        1) ||\n    // if current refinement is a root level and current facetValue is a root level,\n    // keep the facetValue\n    (facetValue.indexOf(hierarchicalSeparator) === -1 &&\n      currentRefinement.indexOf(hierarchicalSeparator) === -1) ||\n    // currentRefinement is a child of the facet value\n    currentRefinement.indexOf(facetValue) === 0 ||\n    // facetValue is a child of the current parent, add it\n    (facetValue.indexOf(parentPath + hierarchicalSeparator) === 0 &&\n      (hierarchicalShowParentLevel ||\n        facetValue.indexOf(currentRefinement) === 0))\n  );\n}\n\nfunction format(\n  facetCount,\n  facetValue,\n  hierarchicalSeparator,\n  currentRefinement,\n  exhaustive\n) {\n  var parts = facetValue.split(hierarchicalSeparator);\n  return {\n    name: parts[parts.length - 1].trim(),\n    path: facetValue,\n    escapedValue: escapeFacetValue(facetValue),\n    count: facetCount,\n    isRefined:\n      currentRefinement === facetValue ||\n      currentRefinement.indexOf(facetValue + hierarchicalSeparator) === 0,\n    exhaustive: exhaustive,\n    data: null,\n  };\n}\n", "'use strict';\n\nvar compact = require('../functions/compact');\nvar defaultsPure = require('../functions/defaultsPure');\nvar fv = require('../functions/escapeFacetValue');\nvar find = require('../functions/find');\nvar findIndex = require('../functions/findIndex');\nvar formatSort = require('../functions/formatSort');\nvar merge = require('../functions/merge');\nvar orderBy = require('../functions/orderBy');\nvar escapeFacetValue = fv.escapeFacetValue;\nvar unescapeFacetValue = fv.unescapeFacetValue;\n\nvar generateHierarchicalTree = require('./generate-hierarchical-tree');\n\n/**\n * @typedef SearchResults.Facet\n * @type {object}\n * @property {string} name name of the attribute in the record\n * @property {object} data the faceting data: value, number of entries\n * @property {object} stats undefined unless facet_stats is retrieved from algolia\n */\n\n/**\n * @typedef SearchResults.HierarchicalFacet\n * @type {object}\n * @property {string} name name of the current value given the hierarchical level, trimmed.\n * If root node, you get the facet name\n * @property {number} count number of objects matching this hierarchical value\n * @property {string} path the current hierarchical value full path\n * @property {boolean} isRefined `true` if the current value was refined, `false` otherwise\n * @property {HierarchicalFacet[]} data sub values for the current level\n */\n\n/**\n * @typedef SearchResults.FacetValue\n * @type {object}\n * @property {string} name the facet value itself\n * @property {number} count times this facet appears in the results\n * @property {boolean} isRefined is the facet currently selected\n * @property {boolean} isExcluded is the facet currently excluded (only for conjunctive facets)\n */\n\n/**\n * @typedef Refinement\n * @type {object}\n * @property {string} type the type of filter used:\n * `numeric`, `facet`, `exclude`, `disjunctive`, `hierarchical`\n * @property {string} attributeName name of the attribute used for filtering\n * @property {string} name the value of the filter\n * @property {number} numericValue the value as a number. Only for numeric filters.\n * @property {string} operator the operator used. Only for numeric filters.\n * @property {number} count the number of computed hits for this filter. Only on facets.\n * @property {boolean} exhaustive if the count is exhaustive\n */\n\n/**\n * Turn an array of attributes in an object of attributes with their position in the array as value\n * @param {string[]} attributes the list of attributes in the record\n * @return {object} the list of attributes indexed by attribute name\n */\nfunction getIndices(attributes) {\n  var indices = {};\n\n  attributes.forEach(function (val, idx) {\n    indices[val] = idx;\n  });\n\n  return indices;\n}\n\nfunction assignFacetStats(dest, facetStats, key) {\n  if (facetStats && facetStats[key]) {\n    dest.stats = facetStats[key];\n  }\n}\n\n/**\n * @typedef {Object} HierarchicalFacet\n * @property {string} name\n * @property {string[]} attributes\n */\n\n/**\n * @param {HierarchicalFacet[]} hierarchicalFacets All hierarchical facets\n * @param {string} hierarchicalAttributeName The name of the hierarchical attribute\n * @return {HierarchicalFacet} The hierarchical facet matching the attribute name\n */\nfunction findMatchingHierarchicalFacetFromAttributeName(\n  hierarchicalFacets,\n  hierarchicalAttributeName\n) {\n  return find(\n    hierarchicalFacets,\n    function facetKeyMatchesAttribute(hierarchicalFacet) {\n      var facetNames = hierarchicalFacet.attributes || [];\n      return facetNames.indexOf(hierarchicalAttributeName) > -1;\n    }\n  );\n}\n\n/**\n * Constructor for SearchResults\n * @class\n * @classdesc SearchResults contains the results of a query to Algolia using the\n * {@link AlgoliaSearchHelper}.\n * @param {SearchParameters} state state that led to the response\n * @param {array.<object>} results the results from algolia client\n * @param {object} options options to control results content\n * @example <caption>SearchResults of the first query in\n * <a href=\"http://demos.algolia.com/instant-search-demo\">the instant search demo</a></caption>\n{\n   \"hitsPerPage\": 10,\n   \"processingTimeMS\": 2,\n   \"facets\": [\n      {\n         \"name\": \"type\",\n         \"data\": {\n            \"HardGood\": 6627,\n            \"BlackTie\": 550,\n            \"Music\": 665,\n            \"Software\": 131,\n            \"Game\": 456,\n            \"Movie\": 1571\n         },\n         \"exhaustive\": false\n      },\n      {\n         \"exhaustive\": false,\n         \"data\": {\n            \"Free shipping\": 5507\n         },\n         \"name\": \"shipping\"\n      }\n  ],\n   \"hits\": [\n      {\n         \"thumbnailImage\": \"http://img.bbystatic.com/BestBuy_US/images/products/1688/1688832_54x108_s.gif\",\n         \"_highlightResult\": {\n            \"shortDescription\": {\n               \"matchLevel\": \"none\",\n               \"value\": \"Safeguard your PC, Mac, Android and iOS devices with comprehensive Internet protection\",\n               \"matchedWords\": []\n            },\n            \"category\": {\n               \"matchLevel\": \"none\",\n               \"value\": \"Computer Security Software\",\n               \"matchedWords\": []\n            },\n            \"manufacturer\": {\n               \"matchedWords\": [],\n               \"value\": \"Webroot\",\n               \"matchLevel\": \"none\"\n            },\n            \"name\": {\n               \"value\": \"Webroot SecureAnywhere Internet Security (3-Device) (1-Year Subscription) - Mac/Windows\",\n               \"matchedWords\": [],\n               \"matchLevel\": \"none\"\n            }\n         },\n         \"image\": \"http://img.bbystatic.com/BestBuy_US/images/products/1688/1688832_105x210_sc.jpg\",\n         \"shipping\": \"Free shipping\",\n         \"bestSellingRank\": 4,\n         \"shortDescription\": \"Safeguard your PC, Mac, Android and iOS devices with comprehensive Internet protection\",\n         \"url\": \"http://www.bestbuy.com/site/webroot-secureanywhere-internet-security-3-devi…d=1219060687969&skuId=1688832&cmp=RMX&ky=2d3GfEmNIzjA0vkzveHdZEBgpPCyMnLTJ\",\n         \"name\": \"Webroot SecureAnywhere Internet Security (3-Device) (1-Year Subscription) - Mac/Windows\",\n         \"category\": \"Computer Security Software\",\n         \"salePrice_range\": \"1 - 50\",\n         \"objectID\": \"1688832\",\n         \"type\": \"Software\",\n         \"customerReviewCount\": 5980,\n         \"salePrice\": 49.99,\n         \"manufacturer\": \"Webroot\"\n      },\n      ....\n  ],\n   \"nbHits\": 10000,\n   \"disjunctiveFacets\": [\n      {\n         \"exhaustive\": false,\n         \"data\": {\n            \"5\": 183,\n            \"12\": 112,\n            \"7\": 149,\n            ...\n         },\n         \"name\": \"customerReviewCount\",\n         \"stats\": {\n            \"max\": 7461,\n            \"avg\": 157.939,\n            \"min\": 1\n         }\n      },\n      {\n         \"data\": {\n            \"Printer Ink\": 142,\n            \"Wireless Speakers\": 60,\n            \"Point & Shoot Cameras\": 48,\n            ...\n         },\n         \"name\": \"category\",\n         \"exhaustive\": false\n      },\n      {\n         \"exhaustive\": false,\n         \"data\": {\n            \"> 5000\": 2,\n            \"1 - 50\": 6524,\n            \"501 - 2000\": 566,\n            \"201 - 500\": 1501,\n            \"101 - 200\": 1360,\n            \"2001 - 5000\": 47\n         },\n         \"name\": \"salePrice_range\"\n      },\n      {\n         \"data\": {\n            \"Dynex™\": 202,\n            \"Insignia™\": 230,\n            \"PNY\": 72,\n            ...\n         },\n         \"name\": \"manufacturer\",\n         \"exhaustive\": false\n      }\n  ],\n   \"query\": \"\",\n   \"nbPages\": 100,\n   \"page\": 0,\n   \"index\": \"bestbuy\"\n}\n **/\nfunction SearchResults(state, results, options) {\n  var mainSubResponse = results[0] || {};\n\n  this._rawResults = results;\n\n  // eslint-disable-next-line consistent-this\n  var self = this;\n\n  // https://www.algolia.com/doc/api-reference/api-methods/search/#response\n  Object.keys(mainSubResponse).forEach(function (key) {\n    self[key] = mainSubResponse[key];\n  });\n\n  // Make every key of the result options reachable from the instance\n  var opts = merge(\n    {\n      persistHierarchicalRootCount: false,\n    },\n    options\n  );\n  Object.keys(opts).forEach(function (key) {\n    self[key] = opts[key];\n  });\n\n  /**\n   * query used to generate the results\n   * @name query\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * The query as parsed by the engine given all the rules.\n   * @name parsedQuery\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * all the records that match the search parameters. Each record is\n   * augmented with a new attribute `_highlightResult`\n   * which is an object keyed by attribute and with the following properties:\n   * - `value` : the value of the facet highlighted (html)\n   * - `matchLevel`: `full`, `partial` or `none`, depending on how the query terms match\n   * @name hits\n   * @member {object[]}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * index where the results come from\n   * @name index\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * number of hits per page requested\n   * @name hitsPerPage\n   * @member {number}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * total number of hits of this query on the index\n   * @name nbHits\n   * @member {number}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * total number of pages with respect to the number of hits per page and the total number of hits\n   * @name nbPages\n   * @member {number}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * current page\n   * @name page\n   * @member {number}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * The position if the position was guessed by IP.\n   * @name aroundLatLng\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   * @example \"48.8637,2.3615\",\n   */\n  /**\n   * The radius computed by Algolia.\n   * @name automaticRadius\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   * @example \"126792922\",\n   */\n  /**\n   * String identifying the server used to serve this request.\n   *\n   * getRankingInfo needs to be set to `true` for this to be returned\n   *\n   * @name serverUsed\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   * @example \"c7-use-2.algolia.net\",\n   */\n  /**\n   * Boolean that indicates if the computation of the counts did time out.\n   * @deprecated\n   * @name timeoutCounts\n   * @member {boolean}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * Boolean that indicates if the computation of the hits did time out.\n   * @deprecated\n   * @name timeoutHits\n   * @member {boolean}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * True if the counts of the facets is exhaustive\n   * @name exhaustiveFacetsCount\n   * @member {boolean}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * True if the number of hits is exhaustive\n   * @name exhaustiveNbHits\n   * @member {boolean}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * Contains the userData if they are set by a [query rule](https://www.algolia.com/doc/guides/query-rules/query-rules-overview/).\n   * @name userData\n   * @member {object[]}\n   * @memberof SearchResults\n   * @instance\n   */\n  /**\n   * queryID is the unique identifier of the query used to generate the current search results.\n   * This value is only available if the `clickAnalytics` search parameter is set to `true`.\n   * @name queryID\n   * @member {string}\n   * @memberof SearchResults\n   * @instance\n   */\n\n  /**\n   * sum of the processing time of all the queries\n   * @name processingTimeMS\n   * @member {number}\n   * @memberof SearchResults\n   * @instance\n   */\n  this.processingTimeMS = results.reduce(function (sum, result) {\n    return result.processingTimeMS === undefined\n      ? sum\n      : sum + result.processingTimeMS;\n  }, 0);\n\n  /**\n   * disjunctive facets results\n   * @member {SearchResults.Facet[]}\n   */\n  this.disjunctiveFacets = [];\n  /**\n   * disjunctive facets results\n   * @member {SearchResults.HierarchicalFacet[]}\n   */\n  this.hierarchicalFacets = state.hierarchicalFacets.map(\n    function initFutureTree() {\n      return [];\n    }\n  );\n  /**\n   * other facets results\n   * @member {SearchResults.Facet[]}\n   */\n  this.facets = [];\n\n  var disjunctiveFacets = state.getRefinedDisjunctiveFacets();\n\n  var facetsIndices = getIndices(state.facets);\n  var disjunctiveFacetsIndices = getIndices(state.disjunctiveFacets);\n  var nextDisjunctiveResult = 1;\n\n  // Since we send request only for disjunctive facets that have been refined,\n  // we get the facets information from the first, general, response.\n\n  var mainFacets = mainSubResponse.facets || {};\n\n  Object.keys(mainFacets).forEach(function (facetKey) {\n    var facetValueObject = mainFacets[facetKey];\n\n    var hierarchicalFacet = findMatchingHierarchicalFacetFromAttributeName(\n      state.hierarchicalFacets,\n      facetKey\n    );\n\n    if (hierarchicalFacet) {\n      // Place the hierarchicalFacet data at the correct index depending on\n      // the attributes order that was defined at the helper initialization\n      var facetIndex = hierarchicalFacet.attributes.indexOf(facetKey);\n      var idxAttributeName = findIndex(state.hierarchicalFacets, function (f) {\n        return f.name === hierarchicalFacet.name;\n      });\n      self.hierarchicalFacets[idxAttributeName][facetIndex] = {\n        attribute: facetKey,\n        data: facetValueObject,\n        exhaustive: mainSubResponse.exhaustiveFacetsCount,\n      };\n    } else {\n      var isFacetDisjunctive = state.disjunctiveFacets.indexOf(facetKey) !== -1;\n      var isFacetConjunctive = state.facets.indexOf(facetKey) !== -1;\n      var position;\n\n      if (isFacetDisjunctive) {\n        position = disjunctiveFacetsIndices[facetKey];\n        self.disjunctiveFacets[position] = {\n          name: facetKey,\n          data: facetValueObject,\n          exhaustive: mainSubResponse.exhaustiveFacetsCount,\n        };\n        assignFacetStats(\n          self.disjunctiveFacets[position],\n          mainSubResponse.facets_stats,\n          facetKey\n        );\n      }\n      if (isFacetConjunctive) {\n        position = facetsIndices[facetKey];\n        self.facets[position] = {\n          name: facetKey,\n          data: facetValueObject,\n          exhaustive: mainSubResponse.exhaustiveFacetsCount,\n        };\n        assignFacetStats(\n          self.facets[position],\n          mainSubResponse.facets_stats,\n          facetKey\n        );\n      }\n    }\n  });\n\n  // Make sure we do not keep holes within the hierarchical facets\n  this.hierarchicalFacets = compact(this.hierarchicalFacets);\n\n  // aggregate the refined disjunctive facets\n  disjunctiveFacets.forEach(function (disjunctiveFacet) {\n    var result = results[nextDisjunctiveResult];\n    var facets = result && result.facets ? result.facets : {};\n    var hierarchicalFacet = state.getHierarchicalFacetByName(disjunctiveFacet);\n\n    // There should be only item in facets.\n    Object.keys(facets).forEach(function (dfacet) {\n      var facetResults = facets[dfacet];\n\n      var position;\n\n      if (hierarchicalFacet) {\n        position = findIndex(state.hierarchicalFacets, function (f) {\n          return f.name === hierarchicalFacet.name;\n        });\n        var attributeIndex = findIndex(\n          self.hierarchicalFacets[position],\n          function (f) {\n            return f.attribute === dfacet;\n          }\n        );\n\n        // previous refinements and no results so not able to find it\n        if (attributeIndex === -1) {\n          return;\n        }\n\n        self.hierarchicalFacets[position][attributeIndex].data = merge(\n          {},\n          self.hierarchicalFacets[position][attributeIndex].data,\n          facetResults\n        );\n      } else {\n        position = disjunctiveFacetsIndices[dfacet];\n\n        var dataFromMainRequest =\n          (mainSubResponse.facets && mainSubResponse.facets[dfacet]) || {};\n\n        self.disjunctiveFacets[position] = {\n          name: dfacet,\n          data: defaultsPure({}, facetResults, dataFromMainRequest),\n          exhaustive: result.exhaustiveFacetsCount,\n        };\n        assignFacetStats(\n          self.disjunctiveFacets[position],\n          result.facets_stats,\n          dfacet\n        );\n\n        if (state.disjunctiveFacetsRefinements[dfacet]) {\n          state.disjunctiveFacetsRefinements[dfacet].forEach(function (\n            refinementValue\n          ) {\n            // add the disjunctive refinements if it is no more retrieved\n            if (\n              !self.disjunctiveFacets[position].data[refinementValue] &&\n              state.disjunctiveFacetsRefinements[dfacet].indexOf(\n                unescapeFacetValue(refinementValue)\n              ) > -1\n            ) {\n              self.disjunctiveFacets[position].data[refinementValue] = 0;\n            }\n          });\n        }\n      }\n    });\n    nextDisjunctiveResult++;\n  });\n\n  // if we have some parent level values for hierarchical facets, merge them\n  state.getRefinedHierarchicalFacets().forEach(function (refinedFacet) {\n    var hierarchicalFacet = state.getHierarchicalFacetByName(refinedFacet);\n    var separator = state._getHierarchicalFacetSeparator(hierarchicalFacet);\n\n    var currentRefinement = state.getHierarchicalRefinement(refinedFacet);\n    // if we are already at a root refinement (or no refinement at all), there is no\n    // root level values request\n    if (\n      currentRefinement.length === 0 ||\n      currentRefinement[0].split(separator).length < 2\n    ) {\n      return;\n    }\n\n    results.slice(nextDisjunctiveResult).forEach(function (result) {\n      var facets = result && result.facets ? result.facets : {};\n\n      Object.keys(facets).forEach(function (dfacet) {\n        var facetResults = facets[dfacet];\n        var position = findIndex(state.hierarchicalFacets, function (f) {\n          return f.name === hierarchicalFacet.name;\n        });\n        var attributeIndex = findIndex(\n          self.hierarchicalFacets[position],\n          function (f) {\n            return f.attribute === dfacet;\n          }\n        );\n\n        // previous refinements and no results so not able to find it\n        if (attributeIndex === -1) {\n          return;\n        }\n\n        // when we always get root levels, if the hits refinement is `beers > IPA` (count: 5),\n        // then the disjunctive values will be `beers` (count: 100),\n        // but we do not want to display\n        //   | beers (100)\n        //     > IPA (5)\n        // We want\n        //   | beers (5)\n        //     > IPA (5)\n        // @MAJOR: remove this legacy behaviour in next major version\n        var defaultData = {};\n\n        if (\n          currentRefinement.length > 0 &&\n          !self.persistHierarchicalRootCount\n        ) {\n          var root = currentRefinement[0].split(separator)[0];\n          defaultData[root] =\n            self.hierarchicalFacets[position][attributeIndex].data[root];\n        }\n\n        self.hierarchicalFacets[position][attributeIndex].data = defaultsPure(\n          defaultData,\n          facetResults,\n          self.hierarchicalFacets[position][attributeIndex].data\n        );\n      });\n\n      nextDisjunctiveResult++;\n    });\n  });\n\n  // add the excludes\n  Object.keys(state.facetsExcludes).forEach(function (facetName) {\n    var excludes = state.facetsExcludes[facetName];\n    var position = facetsIndices[facetName];\n\n    self.facets[position] = {\n      name: facetName,\n      data: mainFacets[facetName],\n      exhaustive: mainSubResponse.exhaustiveFacetsCount,\n    };\n    excludes.forEach(function (facetValue) {\n      self.facets[position] = self.facets[position] || { name: facetName };\n      self.facets[position].data = self.facets[position].data || {};\n      self.facets[position].data[facetValue] = 0;\n    });\n  });\n\n  /**\n   * @type {Array}\n   */\n  this.hierarchicalFacets = this.hierarchicalFacets.map(\n    generateHierarchicalTree(state)\n  );\n\n  /**\n   * @type {Array}\n   */\n  this.facets = compact(this.facets);\n  /**\n   * @type {Array}\n   */\n  this.disjunctiveFacets = compact(this.disjunctiveFacets);\n\n  this._state = state;\n}\n\n/**\n * Get a facet object with its name\n * @deprecated\n * @param {string} name name of the faceted attribute\n * @return {SearchResults.Facet} the facet object\n */\nSearchResults.prototype.getFacetByName = function (name) {\n  function predicate(facet) {\n    return facet.name === name;\n  }\n\n  return (\n    find(this.facets, predicate) ||\n    find(this.disjunctiveFacets, predicate) ||\n    find(this.hierarchicalFacets, predicate)\n  );\n};\n\n/**\n * Get the facet values of a specified attribute from a SearchResults object.\n * @private\n * @param {SearchResults} results the search results to search in\n * @param {string} attribute name of the faceted attribute to search for\n * @return {array|object} facet values. For the hierarchical facets it is an object.\n */\nfunction extractNormalizedFacetValues(results, attribute) {\n  function predicate(facet) {\n    return facet.name === attribute;\n  }\n\n  if (results._state.isConjunctiveFacet(attribute)) {\n    var facet = find(results.facets, predicate);\n    if (!facet) return [];\n\n    return Object.keys(facet.data).map(function (name) {\n      var value = escapeFacetValue(name);\n      return {\n        name: name,\n        escapedValue: value,\n        count: facet.data[name],\n        isRefined: results._state.isFacetRefined(attribute, value),\n        isExcluded: results._state.isExcludeRefined(attribute, name),\n      };\n    });\n  } else if (results._state.isDisjunctiveFacet(attribute)) {\n    var disjunctiveFacet = find(results.disjunctiveFacets, predicate);\n    if (!disjunctiveFacet) return [];\n\n    return Object.keys(disjunctiveFacet.data).map(function (name) {\n      var value = escapeFacetValue(name);\n      return {\n        name: name,\n        escapedValue: value,\n        count: disjunctiveFacet.data[name],\n        isRefined: results._state.isDisjunctiveFacetRefined(attribute, value),\n      };\n    });\n  } else if (results._state.isHierarchicalFacet(attribute)) {\n    var hierarchicalFacetValues = find(results.hierarchicalFacets, predicate);\n    if (!hierarchicalFacetValues) return hierarchicalFacetValues;\n\n    var hierarchicalFacet =\n      results._state.getHierarchicalFacetByName(attribute);\n    var separator =\n      results._state._getHierarchicalFacetSeparator(hierarchicalFacet);\n    var currentRefinement = unescapeFacetValue(\n      results._state.getHierarchicalRefinement(attribute)[0] || ''\n    );\n\n    if (currentRefinement.indexOf(hierarchicalFacet.rootPath) === 0) {\n      currentRefinement = currentRefinement.replace(\n        hierarchicalFacet.rootPath + separator,\n        ''\n      );\n    }\n\n    var currentRefinementSplit = currentRefinement.split(separator);\n    currentRefinementSplit.unshift(attribute);\n\n    setIsRefined(hierarchicalFacetValues, currentRefinementSplit, 0);\n\n    return hierarchicalFacetValues;\n  }\n\n  return undefined;\n}\n\n/**\n * Set the isRefined of a hierarchical facet result based on the current state.\n * @param {SearchResults.HierarchicalFacet} item Hierarchical facet to fix\n * @param {string[]} currentRefinement array of parts of the current hierarchical refinement\n * @param {number} depth recursion depth in the currentRefinement\n * @return {undefined} function mutates the item\n */\nfunction setIsRefined(item, currentRefinement, depth) {\n  item.isRefined =\n    item.name === (currentRefinement[depth] && currentRefinement[depth].trim());\n  if (item.data) {\n    item.data.forEach(function (child) {\n      setIsRefined(child, currentRefinement, depth + 1);\n    });\n  }\n}\n\n/**\n * Sort nodes of a hierarchical or disjunctive facet results\n * @private\n * @param {function} sortFn sort function to apply\n * @param {HierarchicalFacet|Array} node node upon which we want to apply the sort\n * @param {string[]} names attribute names\n * @param {number} [level=0] current index in the names array\n * @return {HierarchicalFacet|Array} sorted node\n */\nfunction recSort(sortFn, node, names, level) {\n  level = level || 0;\n\n  if (Array.isArray(node)) {\n    return sortFn(node, names[level]);\n  }\n\n  if (!node.data || node.data.length === 0) {\n    return node;\n  }\n\n  var children = node.data.map(function (childNode) {\n    return recSort(sortFn, childNode, names, level + 1);\n  });\n  var sortedChildren = sortFn(children, names[level]);\n  var newNode = defaultsPure({ data: sortedChildren }, node);\n  return newNode;\n}\n\nSearchResults.DEFAULT_SORT = ['isRefined:desc', 'count:desc', 'name:asc'];\n\nfunction vanillaSortFn(order, data) {\n  return data.sort(order);\n}\n\n/**\n * @typedef FacetOrdering\n * @type {Object}\n * @property {string[]} [order]\n * @property {'count' | 'alpha' | 'hidden'} [sortRemainingBy]\n */\n\n/**\n * Sorts facet arrays via their facet ordering\n * @param {Array} facetValues the values\n * @param {FacetOrdering} facetOrdering the ordering\n * @returns {Array} the sorted facet values\n */\nfunction sortViaFacetOrdering(facetValues, facetOrdering) {\n  var orderedFacets = [];\n  var remainingFacets = [];\n  var hide = facetOrdering.hide || [];\n  var order = facetOrdering.order || [];\n\n  /**\n   * an object with the keys being the values in order, the values their index:\n   * ['one', 'two'] -> { one: 0, two: 1 }\n   */\n  var reverseOrder = order.reduce(function (acc, name, i) {\n    acc[name] = i;\n    return acc;\n  }, {});\n\n  facetValues.forEach(function (item) {\n    // hierarchical facets get sorted using their raw name\n    var name = item.path || item.name;\n    var hidden = hide.indexOf(name) > -1;\n    if (!hidden && reverseOrder[name] !== undefined) {\n      orderedFacets[reverseOrder[name]] = item;\n    } else if (!hidden) {\n      remainingFacets.push(item);\n    }\n  });\n\n  orderedFacets = orderedFacets.filter(function (facet) {\n    return facet;\n  });\n\n  var sortRemainingBy = facetOrdering.sortRemainingBy;\n  var ordering;\n  if (sortRemainingBy === 'hidden') {\n    return orderedFacets;\n  } else if (sortRemainingBy === 'alpha') {\n    ordering = [\n      ['path', 'name'],\n      ['asc', 'asc'],\n    ];\n  } else {\n    ordering = [['count'], ['desc']];\n  }\n\n  return orderedFacets.concat(\n    orderBy(remainingFacets, ordering[0], ordering[1])\n  );\n}\n\n/**\n * @param {SearchResults} results the search results class\n * @param {string} attribute the attribute to retrieve ordering of\n * @returns {FacetOrdering | undefined} the facet ordering\n */\nfunction getFacetOrdering(results, attribute) {\n  return (\n    results.renderingContent &&\n    results.renderingContent.facetOrdering &&\n    results.renderingContent.facetOrdering.values &&\n    results.renderingContent.facetOrdering.values[attribute]\n  );\n}\n\n/**\n * Get a the list of values for a given facet attribute. Those values are sorted\n * refinement first, descending count (bigger value on top), and name ascending\n * (alphabetical order). The sort formula can overridden using either string based\n * predicates or a function.\n *\n * This method will return all the values returned by the Algolia engine plus all\n * the values already refined. This means that it can happen that the\n * `maxValuesPerFacet` [configuration](https://www.algolia.com/doc/rest-api/search#param-maxValuesPerFacet)\n * might not be respected if you have facet values that are already refined.\n * @param {string} attribute attribute name\n * @param {object} opts configuration options.\n * @param {boolean} [opts.facetOrdering]\n * Force the use of facetOrdering from the result if a sortBy is present. If\n * sortBy isn't present, facetOrdering will be used automatically.\n * @param {Array.<string> | function} opts.sortBy\n * When using strings, it consists of\n * the name of the [FacetValue](#SearchResults.FacetValue) or the\n * [HierarchicalFacet](#SearchResults.HierarchicalFacet) attributes with the\n * order (`asc` or `desc`). For example to order the value by count, the\n * argument would be `['count:asc']`.\n *\n * If only the attribute name is specified, the ordering defaults to the one\n * specified in the default value for this attribute.\n *\n * When not specified, the order is\n * ascending.  This parameter can also be a function which takes two facet\n * values and should return a number, 0 if equal, 1 if the first argument is\n * bigger or -1 otherwise.\n *\n * The default value for this attribute `['isRefined:desc', 'count:desc', 'name:asc']`\n * @return {FacetValue[]|HierarchicalFacet|undefined} depending on the type of facet of\n * the attribute requested (hierarchical, disjunctive or conjunctive)\n * @example\n * helper.on('result', function(event){\n *   //get values ordered only by name ascending using the string predicate\n *   event.results.getFacetValues('city', {sortBy: ['name:asc']});\n *   //get values  ordered only by count ascending using a function\n *   event.results.getFacetValues('city', {\n *     // this is equivalent to ['count:asc']\n *     sortBy: function(a, b) {\n *       if (a.count === b.count) return 0;\n *       if (a.count > b.count)   return 1;\n *       if (b.count > a.count)   return -1;\n *     }\n *   });\n * });\n */\nSearchResults.prototype.getFacetValues = function (attribute, opts) {\n  var facetValues = extractNormalizedFacetValues(this, attribute);\n  if (!facetValues) {\n    return undefined;\n  }\n\n  var options = defaultsPure({}, opts, {\n    sortBy: SearchResults.DEFAULT_SORT,\n    // if no sortBy is given, attempt to sort based on facetOrdering\n    // if it is given, we still allow to sort via facet ordering first\n    facetOrdering: !(opts && opts.sortBy),\n  });\n\n  // eslint-disable-next-line consistent-this\n  var results = this;\n  var attributes;\n  if (Array.isArray(facetValues)) {\n    attributes = [attribute];\n  } else {\n    var config = results._state.getHierarchicalFacetByName(facetValues.name);\n    attributes = config.attributes;\n  }\n\n  return recSort(\n    function (data, facetName) {\n      if (options.facetOrdering) {\n        var facetOrdering = getFacetOrdering(results, facetName);\n        if (facetOrdering) {\n          return sortViaFacetOrdering(data, facetOrdering);\n        }\n      }\n\n      if (Array.isArray(options.sortBy)) {\n        var order = formatSort(options.sortBy, SearchResults.DEFAULT_SORT);\n        return orderBy(data, order[0], order[1]);\n      } else if (typeof options.sortBy === 'function') {\n        return vanillaSortFn(options.sortBy, data);\n      }\n      throw new Error(\n        'options.sortBy is optional but if defined it must be ' +\n          'either an array of string (predicates) or a sorting function'\n      );\n    },\n    facetValues,\n    attributes\n  );\n};\n\n/**\n * Returns the facet stats if attribute is defined and the facet contains some.\n * Otherwise returns undefined.\n * @param {string} attribute name of the faceted attribute\n * @return {object} The stats of the facet\n */\nSearchResults.prototype.getFacetStats = function (attribute) {\n  if (this._state.isConjunctiveFacet(attribute)) {\n    return getFacetStatsIfAvailable(this.facets, attribute);\n  } else if (this._state.isDisjunctiveFacet(attribute)) {\n    return getFacetStatsIfAvailable(this.disjunctiveFacets, attribute);\n  }\n\n  return undefined;\n};\n\n/**\n * @typedef {Object} FacetListItem\n * @property {string} name\n */\n\n/**\n * @param {FacetListItem[]} facetList (has more items, but enough for here)\n * @param {string} facetName The attribute to look for\n * @return {object|undefined} The stats of the facet\n */\nfunction getFacetStatsIfAvailable(facetList, facetName) {\n  var data = find(facetList, function (facet) {\n    return facet.name === facetName;\n  });\n  return data && data.stats;\n}\n\n/**\n * Returns all refinements for all filters + tags. It also provides\n * additional information: count and exhaustiveness for each filter.\n *\n * See the [refinement type](#Refinement) for an exhaustive view of the available\n * data.\n *\n * Note that for a numeric refinement, results are grouped per operator, this\n * means that it will return responses for operators which are empty.\n *\n * @return {Array.<Refinement>} all the refinements\n */\nSearchResults.prototype.getRefinements = function () {\n  var state = this._state;\n  // eslint-disable-next-line consistent-this\n  var results = this;\n  var res = [];\n\n  Object.keys(state.facetsRefinements).forEach(function (attributeName) {\n    state.facetsRefinements[attributeName].forEach(function (name) {\n      res.push(\n        getRefinement(state, 'facet', attributeName, name, results.facets)\n      );\n    });\n  });\n\n  Object.keys(state.facetsExcludes).forEach(function (attributeName) {\n    state.facetsExcludes[attributeName].forEach(function (name) {\n      res.push(\n        getRefinement(state, 'exclude', attributeName, name, results.facets)\n      );\n    });\n  });\n\n  Object.keys(state.disjunctiveFacetsRefinements).forEach(function (\n    attributeName\n  ) {\n    state.disjunctiveFacetsRefinements[attributeName].forEach(function (name) {\n      res.push(\n        getRefinement(\n          state,\n          'disjunctive',\n          attributeName,\n          name,\n          results.disjunctiveFacets\n        )\n      );\n    });\n  });\n\n  Object.keys(state.hierarchicalFacetsRefinements).forEach(function (\n    attributeName\n  ) {\n    state.hierarchicalFacetsRefinements[attributeName].forEach(function (name) {\n      res.push(\n        getHierarchicalRefinement(\n          state,\n          attributeName,\n          name,\n          results.hierarchicalFacets\n        )\n      );\n    });\n  });\n\n  Object.keys(state.numericRefinements).forEach(function (attributeName) {\n    var operators = state.numericRefinements[attributeName];\n    Object.keys(operators).forEach(function (operator) {\n      operators[operator].forEach(function (value) {\n        res.push({\n          type: 'numeric',\n          attributeName: attributeName,\n          name: value,\n          numericValue: value,\n          operator: operator,\n        });\n      });\n    });\n  });\n\n  state.tagRefinements.forEach(function (name) {\n    res.push({ type: 'tag', attributeName: '_tags', name: name });\n  });\n\n  return res;\n};\n\n/**\n * @typedef {Object} Facet\n * @property {string} name\n * @property {Object} data\n * @property {boolean} exhaustive\n */\n\n/**\n * @param {SearchParameters} state the current state\n * @param {string} type the type of the refinement\n * @param {string} attributeName The attribute of the facet\n * @param {*} name The name of the facet\n * @param {Facet[]} resultsFacets facets from the results\n * @return {Refinement} the refinement\n */\nfunction getRefinement(state, type, attributeName, name, resultsFacets) {\n  var facet = find(resultsFacets, function (f) {\n    return f.name === attributeName;\n  });\n  var count = facet && facet.data && facet.data[name] ? facet.data[name] : 0;\n  var exhaustive = (facet && facet.exhaustive) || false;\n\n  return {\n    type: type,\n    attributeName: attributeName,\n    name: name,\n    count: count,\n    exhaustive: exhaustive,\n  };\n}\n\n/**\n * @param {SearchParameters} state the current state\n * @param {string} attributeName the attribute of the hierarchical facet\n * @param {string} name the name of the facet\n * @param {Facet[]} resultsFacets facets from the results\n * @return {HierarchicalFacet} the hierarchical facet\n */\nfunction getHierarchicalRefinement(state, attributeName, name, resultsFacets) {\n  var facetDeclaration = state.getHierarchicalFacetByName(attributeName);\n  var separator = state._getHierarchicalFacetSeparator(facetDeclaration);\n  var split = name.split(separator);\n  var rootFacet = find(resultsFacets, function (facet) {\n    return facet.name === attributeName;\n  });\n\n  var facet = split.reduce(function (intermediateFacet, part) {\n    var newFacet =\n      intermediateFacet &&\n      find(intermediateFacet.data, function (f) {\n        return f.name === part;\n      });\n    return newFacet !== undefined ? newFacet : intermediateFacet;\n  }, rootFacet);\n\n  var count = (facet && facet.count) || 0;\n  var exhaustive = (facet && facet.exhaustive) || false;\n  var path = (facet && facet.path) || '';\n\n  return {\n    type: 'hierarchical',\n    attributeName: attributeName,\n    name: path,\n    count: count,\n    exhaustive: exhaustive,\n  };\n}\n\nmodule.exports = SearchResults;\n", "// @MAJOR: remove this function and use Array.prototype.flat\nmodule.exports = function flat(arr) {\n  return arr.reduce(function (acc, val) {\n    return acc.concat(val);\n  }, []);\n};\n", "'use strict';\n\nvar find = require('../functions/find');\nvar flat = require('../functions/flat');\n\nfunction getAverageIndices(indexTracker, nrOfObjs) {\n  var avgIndices = [];\n\n  Object.keys(indexTracker).forEach(function (key) {\n    if (indexTracker[key].count < 2) {\n      indexTracker[key].indexSum += 100;\n    }\n    avgIndices.push({\n      objectID: key,\n      avgOfIndices: indexTracker[key].indexSum / nrOfObjs,\n    });\n  });\n\n  return avgIndices.sort(function (a, b) {\n    return a.avgOfIndices > b.avgOfIndices ? 1 : -1;\n  });\n}\n\nfunction sortAndMergeRecommendations(results) {\n  var indexTracker = {};\n\n  results.forEach(function (hits) {\n    hits.forEach(function (hit, index) {\n      if (!indexTracker[hit.objectID]) {\n        indexTracker[hit.objectID] = { indexSum: index, count: 1 };\n      } else {\n        indexTracker[hit.objectID] = {\n          indexSum: indexTracker[hit.objectID].indexSum + index,\n          count: indexTracker[hit.objectID].count + 1,\n        };\n      }\n    });\n  });\n\n  var sortedAverageIndices = getAverageIndices(indexTracker, results.length);\n\n  var finalOrder = sortedAverageIndices.reduce(function (\n    orderedHits,\n    avgIndexRef\n  ) {\n    var result = find(flat(results), function (hit) {\n      return hit.objectID === avgIndexRef.objectID;\n    });\n    return result ? orderedHits.concat(result) : orderedHits;\n  },\n  []);\n\n  return finalOrder;\n}\n\nmodule.exports = sortAndMergeRecommendations;\n", "'use strict';\n\nmodule.exports = '3.22.3';\n", "'use strict';\n\nvar EventEmitter = require('@algolia/events');\n\nvar DerivedHelper = require('./DerivedHelper');\nvar escapeFacetValue = require('./functions/escapeFacetValue').escapeFacetValue;\nvar inherits = require('./functions/inherits');\nvar merge = require('./functions/merge');\nvar objectHasKeys = require('./functions/objectHasKeys');\nvar omit = require('./functions/omit');\nvar RecommendParameters = require('./RecommendParameters');\nvar RecommendResults = require('./RecommendResults');\nvar requestBuilder = require('./requestBuilder');\nvar SearchParameters = require('./SearchParameters');\nvar SearchResults = require('./SearchResults');\nvar sortAndMergeRecommendations = require('./utils/sortAndMergeRecommendations');\nvar version = require('./version');\n\n/**\n * Event triggered when a parameter is set or updated\n * @event AlgoliaSearchHelper#event:change\n * @property {object} event\n * @property {SearchParameters} event.state the current parameters with the latest changes applied\n * @property {SearchResults} event.results the previous results received from Algolia. `null` before the first request\n * @example\n * helper.on('change', function(event) {\n *   console.log('The parameters have changed');\n * });\n */\n\n/**\n * Event triggered when a main search is sent to Algolia\n * @event AlgoliaSearchHelper#event:search\n * @property {object} event\n * @property {SearchParameters} event.state the parameters used for this search\n * @property {SearchResults} event.results the results from the previous search. `null` if it is the first search.\n * @example\n * helper.on('search', function(event) {\n *   console.log('Search sent');\n * });\n */\n\n/**\n * Event triggered when a search using `searchForFacetValues` is sent to Algolia\n * @event AlgoliaSearchHelper#event:searchForFacetValues\n * @property {object} event\n * @property {SearchParameters} event.state the parameters used for this search it is the first search.\n * @property {string} event.facet the facet searched into\n * @property {string} event.query the query used to search in the facets\n * @example\n * helper.on('searchForFacetValues', function(event) {\n *   console.log('searchForFacetValues sent');\n * });\n */\n\n/**\n * Event triggered when a search using `searchOnce` is sent to Algolia\n * @event AlgoliaSearchHelper#event:searchOnce\n * @property {object} event\n * @property {SearchParameters} event.state the parameters used for this search it is the first search.\n * @example\n * helper.on('searchOnce', function(event) {\n *   console.log('searchOnce sent');\n * });\n */\n\n/**\n * Event triggered when the results are retrieved from Algolia\n * @event AlgoliaSearchHelper#event:result\n * @property {object} event\n * @property {SearchResults} event.results the results received from Algolia\n * @property {SearchParameters} event.state the parameters used to query Algolia. Those might be different from the one in the helper instance (for example if the network is unreliable).\n * @example\n * helper.on('result', function(event) {\n *   console.log('Search results received');\n * });\n */\n\n/**\n * Event triggered when Algolia sends back an error. For example, if an unknown parameter is\n * used, the error can be caught using this event.\n * @event AlgoliaSearchHelper#event:error\n * @property {object} event\n * @property {Error} event.error the error returned by the Algolia.\n * @example\n * helper.on('error', function(event) {\n *   console.log('Houston we got a problem.');\n * });\n */\n\n/**\n * Event triggered when the queue of queries have been depleted (with any result or outdated queries)\n * @event AlgoliaSearchHelper#event:searchQueueEmpty\n * @example\n * helper.on('searchQueueEmpty', function() {\n *   console.log('No more search pending');\n *   // This is received before the result event if we're not expecting new results\n * });\n *\n * helper.search();\n */\n\n/**\n * Initialize a new AlgoliaSearchHelper\n * @class\n * @classdesc The AlgoliaSearchHelper is a class that ease the management of the\n * search. It provides an event based interface for search callbacks:\n *  - change: when the internal search state is changed.\n *    This event contains a {@link SearchParameters} object and the\n *    {@link SearchResults} of the last result if any.\n *  - search: when a search is triggered using the `search()` method.\n *  - result: when the response is retrieved from Algolia and is processed.\n *    This event contains a {@link SearchResults} object and the\n *    {@link SearchParameters} corresponding to this answer.\n *  - error: when the response is an error. This event contains the error returned by the server.\n * @param  {AlgoliaSearch} client an AlgoliaSearch client\n * @param  {string} index the index name to query\n * @param  {SearchParameters | object} options an object defining the initial\n * config of the search. It doesn't have to be a {SearchParameters},\n * just an object containing the properties you need from it.\n * @param {SearchResultsOptions|object} searchResultsOptions an object defining the options to use when creating the search results.\n */\nfunction AlgoliaSearchHelper(client, index, options, searchResultsOptions) {\n  if (typeof client.addAlgoliaAgent === 'function') {\n    client.addAlgoliaAgent('JS Helper (' + version + ')');\n  }\n\n  this.setClient(client);\n  var opts = options || {};\n  opts.index = index;\n  this.state = SearchParameters.make(opts);\n  this.recommendState = new RecommendParameters({\n    params: opts.recommendState,\n  });\n  this.lastResults = null;\n  this.lastRecommendResults = null;\n  this._queryId = 0;\n  this._recommendQueryId = 0;\n  this._lastQueryIdReceived = -1;\n  this._lastRecommendQueryIdReceived = -1;\n  this.derivedHelpers = [];\n  this._currentNbQueries = 0;\n  this._currentNbRecommendQueries = 0;\n  this._searchResultsOptions = searchResultsOptions;\n  this._recommendCache = {};\n}\n\ninherits(AlgoliaSearchHelper, EventEmitter);\n\n/**\n * Start the search with the parameters set in the state. When the\n * method is called, it triggers a `search` event. The results will\n * be available through the `result` event. If an error occurs, an\n * `error` will be fired instead.\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires search\n * @fires result\n * @fires error\n * @chainable\n */\nAlgoliaSearchHelper.prototype.search = function () {\n  this._search({ onlyWithDerivedHelpers: false });\n  return this;\n};\n\nAlgoliaSearchHelper.prototype.searchOnlyWithDerivedHelpers = function () {\n  this._search({ onlyWithDerivedHelpers: true });\n  return this;\n};\n\n/**\n * Sends the recommendation queries set in the state. When the method is\n * called, it triggers a `fetch` event. The results will be available through\n * the `result` event. If an error occurs, an `error` will be fired instead.\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires fetch\n * @fires result\n * @fires error\n * @chainable\n */\nAlgoliaSearchHelper.prototype.recommend = function () {\n  this._recommend();\n  return this;\n};\n\n/**\n * Gets the search query parameters that would be sent to the Algolia Client\n * for the hits\n * @return {object} Query Parameters\n */\nAlgoliaSearchHelper.prototype.getQuery = function () {\n  var state = this.state;\n  return requestBuilder._getHitsSearchParams(state);\n};\n\n/**\n * Start a search using a modified version of the current state. This method does\n * not trigger the helper lifecycle and does not modify the state kept internally\n * by the helper. This second aspect means that the next search call will be the\n * same as a search call before calling searchOnce.\n * @param {object} options can contain all the parameters that can be set to SearchParameters\n * plus the index\n * @param {function} [cb] optional callback executed when the response from the\n * server is back.\n * @return {promise|undefined} if a callback is passed the method returns undefined\n * otherwise it returns a promise containing an object with two keys :\n *  - content with a SearchResults\n *  - state with the state used for the query as a SearchParameters\n * @example\n * // Changing the number of records returned per page to 1\n * // This example uses the callback API\n * var state = helper.searchOnce({hitsPerPage: 1},\n *   function(error, content, state) {\n *     // if an error occurred it will be passed in error, otherwise its value is null\n *     // content contains the results formatted as a SearchResults\n *     // state is the instance of SearchParameters used for this search\n *   });\n * @example\n * // Changing the number of records returned per page to 1\n * // This example uses the promise API\n * var state1 = helper.searchOnce({hitsPerPage: 1})\n *                 .then(promiseHandler);\n *\n * function promiseHandler(res) {\n *   // res contains\n *   // {\n *   //   content : SearchResults\n *   //   state   : SearchParameters (the one used for this specific search)\n *   // }\n * }\n */\nAlgoliaSearchHelper.prototype.searchOnce = function (options, cb) {\n  var tempState = !options\n    ? this.state\n    : this.state.setQueryParameters(options);\n  var queries = requestBuilder._getQueries(tempState.index, tempState);\n  // eslint-disable-next-line consistent-this\n  var self = this;\n\n  this._currentNbQueries++;\n\n  this.emit('searchOnce', {\n    state: tempState,\n  });\n\n  if (cb) {\n    this.client\n      .search(queries)\n      .then(function (content) {\n        self._currentNbQueries--;\n        if (self._currentNbQueries === 0) {\n          self.emit('searchQueueEmpty');\n        }\n\n        cb(null, new SearchResults(tempState, content.results), tempState);\n      })\n      .catch(function (err) {\n        self._currentNbQueries--;\n        if (self._currentNbQueries === 0) {\n          self.emit('searchQueueEmpty');\n        }\n\n        cb(err, null, tempState);\n      });\n\n    return undefined;\n  }\n\n  return this.client.search(queries).then(\n    function (content) {\n      self._currentNbQueries--;\n      if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n      return {\n        content: new SearchResults(tempState, content.results),\n        state: tempState,\n        _originalResponse: content,\n      };\n    },\n    function (e) {\n      self._currentNbQueries--;\n      if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n      throw e;\n    }\n  );\n};\n\n/**\n * Start the search for answers with the parameters set in the state.\n * This method returns a promise.\n * @param {Object} options - the options for answers API call\n * @param {string[]} options.attributesForPrediction - Attributes to use for predictions. If empty, `searchableAttributes` is used instead.\n * @param {string[]} options.queryLanguages - The languages in the query. Currently only supports ['en'].\n * @param {number} options.nbHits - Maximum number of answers to retrieve from the Answers Engine. Cannot be greater than 1000.\n *\n * @return {promise} the answer results\n * @deprecated answers is deprecated and will be replaced with new initiatives\n */\nAlgoliaSearchHelper.prototype.findAnswers = function (options) {\n  // eslint-disable-next-line no-console\n  console.warn('[algoliasearch-helper] answers is no longer supported');\n  var state = this.state;\n  var derivedHelper = this.derivedHelpers[0];\n  if (!derivedHelper) {\n    return Promise.resolve([]);\n  }\n  var derivedState = derivedHelper.getModifiedState(state);\n  var data = merge(\n    {\n      attributesForPrediction: options.attributesForPrediction,\n      nbHits: options.nbHits,\n    },\n    {\n      params: omit(requestBuilder._getHitsSearchParams(derivedState), [\n        'attributesToSnippet',\n        'hitsPerPage',\n        'restrictSearchableAttributes',\n        'snippetEllipsisText',\n      ]),\n    }\n  );\n\n  var errorMessage =\n    'search for answers was called, but this client does not have a function client.initIndex(index).findAnswers';\n  if (typeof this.client.initIndex !== 'function') {\n    throw new Error(errorMessage);\n  }\n  var index = this.client.initIndex(derivedState.index);\n  if (typeof index.findAnswers !== 'function') {\n    throw new Error(errorMessage);\n  }\n  return index.findAnswers(derivedState.query, options.queryLanguages, data);\n};\n\n/**\n * Structure of each result when using\n * [`searchForFacetValues()`](reference.html#AlgoliaSearchHelper#searchForFacetValues)\n * @typedef FacetSearchHit\n * @type {object}\n * @property {string} value the facet value\n * @property {string} highlighted the facet value highlighted with the query string\n * @property {number} count number of occurrence of this facet value\n * @property {boolean} isRefined true if the value is already refined\n */\n\n/**\n * Structure of the data resolved by the\n * [`searchForFacetValues()`](reference.html#AlgoliaSearchHelper#searchForFacetValues)\n * promise.\n * @typedef FacetSearchResult\n * @type {object}\n * @property {FacetSearchHit} facetHits the results for this search for facet values\n * @property {number} processingTimeMS time taken by the query inside the engine\n */\n\n/**\n * Search for facet values based on an query and the name of a faceted attribute. This\n * triggers a search and will return a promise. On top of using the query, it also sends\n * the parameters from the state so that the search is narrowed down to only the possible values.\n *\n * See the description of [FacetSearchResult](reference.html#FacetSearchResult)\n * @param {string} facet the name of the faceted attribute\n * @param {string} query the string query for the search\n * @param {number} [maxFacetHits] the maximum number values returned. Should be > 0 and <= 100\n * @param {object} [userState] the set of custom parameters to use on top of the current state. Setting a property to `undefined` removes\n * it in the generated query.\n * @return {promise.<FacetSearchResult>} the results of the search\n */\nAlgoliaSearchHelper.prototype.searchForFacetValues = function (\n  facet,\n  query,\n  maxFacetHits,\n  userState\n) {\n  var clientHasSFFV = typeof this.client.searchForFacetValues === 'function';\n  var clientHasInitIndex = typeof this.client.initIndex === 'function';\n  if (\n    !clientHasSFFV &&\n    !clientHasInitIndex &&\n    typeof this.client.search !== 'function'\n  ) {\n    throw new Error(\n      'search for facet values (searchable) was called, but this client does not have a function client.searchForFacetValues or client.initIndex(index).searchForFacetValues'\n    );\n  }\n\n  var state = this.state.setQueryParameters(userState || {});\n  var isDisjunctive = state.isDisjunctiveFacet(facet);\n  var algoliaQuery = requestBuilder.getSearchForFacetQuery(\n    facet,\n    query,\n    maxFacetHits,\n    state\n  );\n\n  this._currentNbQueries++;\n  // eslint-disable-next-line consistent-this\n  var self = this;\n  var searchForFacetValuesPromise;\n  // newer algoliasearch ^3.27.1 - ~4.0.0\n  if (clientHasSFFV) {\n    searchForFacetValuesPromise = this.client.searchForFacetValues([\n      { indexName: state.index, params: algoliaQuery },\n    ]);\n    // algoliasearch < 3.27.1\n  } else if (clientHasInitIndex) {\n    searchForFacetValuesPromise = this.client\n      .initIndex(state.index)\n      .searchForFacetValues(algoliaQuery);\n    // algoliasearch ~5.0.0\n  } else {\n    // @MAJOR only use client.search\n    delete algoliaQuery.facetName;\n    searchForFacetValuesPromise = this.client\n      .search([\n        {\n          type: 'facet',\n          facet: facet,\n          indexName: state.index,\n          params: algoliaQuery,\n        },\n      ])\n      .then(function processResponse(response) {\n        return response.results[0];\n      });\n  }\n\n  this.emit('searchForFacetValues', {\n    state: state,\n    facet: facet,\n    query: query,\n  });\n\n  return searchForFacetValuesPromise.then(\n    function addIsRefined(content) {\n      self._currentNbQueries--;\n      if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n\n      content = Array.isArray(content) ? content[0] : content;\n\n      content.facetHits.forEach(function (f) {\n        f.escapedValue = escapeFacetValue(f.value);\n        f.isRefined = isDisjunctive\n          ? state.isDisjunctiveFacetRefined(facet, f.escapedValue)\n          : state.isFacetRefined(facet, f.escapedValue);\n      });\n\n      return content;\n    },\n    function (e) {\n      self._currentNbQueries--;\n      if (self._currentNbQueries === 0) self.emit('searchQueueEmpty');\n      throw e;\n    }\n  );\n};\n\n/**\n * Sets the text query used for the search.\n *\n * This method resets the current page to 0.\n * @param  {string} q the user query\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.setQuery = function (q) {\n  this._change({\n    state: this.state.resetPage().setQuery(q),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n/**\n * Remove all the types of refinements except tags. A string can be provided to remove\n * only the refinements of a specific attribute. For more advanced use case, you can\n * provide a function instead. This function should follow the\n * [clearCallback definition](#SearchParameters.clearCallback).\n *\n * This method resets the current page to 0.\n * @param {string} [name] optional name of the facet / attribute on which we want to remove all refinements\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n * @example\n * // Removing all the refinements\n * helper.clearRefinements().search();\n * @example\n * // Removing all the filters on a the category attribute.\n * helper.clearRefinements('category').search();\n * @example\n * // Removing only the exclude filters on the category facet.\n * helper.clearRefinements(function(value, attribute, type) {\n *   return type === 'exclude' && attribute === 'category';\n * }).search();\n */\nAlgoliaSearchHelper.prototype.clearRefinements = function (name) {\n  this._change({\n    state: this.state.resetPage().clearRefinements(name),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n/**\n * Remove all the tag filters.\n *\n * This method resets the current page to 0.\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.clearTags = function () {\n  this._change({\n    state: this.state.resetPage().clearTags(),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n/**\n * Adds a disjunctive filter to a faceted attribute with the `value` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value (will be converted to string)\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addDisjunctiveFacetRefinement = function (\n  facet,\n  value\n) {\n  this._change({\n    state: this.state.resetPage().addDisjunctiveFacetRefinement(facet, value),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#addDisjunctiveFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.addDisjunctiveRefine = function () {\n  return this.addDisjunctiveFacetRefinement.apply(this, arguments);\n};\n\n/**\n * Adds a refinement on a hierarchical facet. It will throw\n * an exception if the facet is not defined or if the facet\n * is already refined.\n *\n * This method resets the current page to 0.\n * @param {string} facet the facet name\n * @param {string} path the hierarchical facet path\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @throws Error if the facet is not defined or if the facet is refined\n * @chainable\n * @fires change\n */\nAlgoliaSearchHelper.prototype.addHierarchicalFacetRefinement = function (\n  facet,\n  path\n) {\n  this._change({\n    state: this.state.resetPage().addHierarchicalFacetRefinement(facet, path),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n/**\n * Adds a an numeric filter to an attribute with the `operator` and `value` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param  {string} attribute the attribute on which the numeric filter applies\n * @param  {string} operator the operator of the filter\n * @param  {number} value the value of the filter\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addNumericRefinement = function (\n  attribute,\n  operator,\n  value\n) {\n  this._change({\n    state: this.state\n      .resetPage()\n      .addNumericRefinement(attribute, operator, value),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n/**\n * Adds a filter to a faceted attribute with the `value` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value (will be converted to string)\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addFacetRefinement = function (facet, value) {\n  this._change({\n    state: this.state.resetPage().addFacetRefinement(facet, value),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#addFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.addRefine = function () {\n  return this.addFacetRefinement.apply(this, arguments);\n};\n\n/**\n * Adds a an exclusion filter to a faceted attribute with the `value` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value (will be converted to string)\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addFacetExclusion = function (facet, value) {\n  this._change({\n    state: this.state.resetPage().addExcludeRefinement(facet, value),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#addFacetExclusion}\n */\nAlgoliaSearchHelper.prototype.addExclude = function () {\n  return this.addFacetExclusion.apply(this, arguments);\n};\n\n/**\n * Adds a tag filter with the `tag` provided. If the\n * filter is already set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param {string} tag the tag to add to the filter\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addTag = function (tag) {\n  this._change({\n    state: this.state.resetPage().addTagRefinement(tag),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n/**\n * Adds a \"frequently bought together\" recommendation query.\n *\n * @param {FrequentlyBoughtTogetherQuery} params the parameters for the recommendation\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addFrequentlyBoughtTogether = function (params) {\n  this._recommendChange({\n    state: this.recommendState.addFrequentlyBoughtTogether(params),\n  });\n\n  return this;\n};\n\n/**\n * Adds a \"related products\" recommendation query.\n *\n * @param {RelatedProductsQuery} params the parameters for the recommendation\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addRelatedProducts = function (params) {\n  this._recommendChange({\n    state: this.recommendState.addRelatedProducts(params),\n  });\n\n  return this;\n};\n\n/**\n * Adds a \"trending items\" recommendation query.\n *\n * @param {TrendingItemsQuery} params the parameters for the recommendation\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addTrendingItems = function (params) {\n  this._recommendChange({\n    state: this.recommendState.addTrendingItems(params),\n  });\n\n  return this;\n};\n\n/**\n * Adds a \"trending facets\" recommendation query.\n *\n * @param {TrendingFacetsQuery} params the parameters for the recommendation\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addTrendingFacets = function (params) {\n  this._recommendChange({\n    state: this.recommendState.addTrendingFacets(params),\n  });\n\n  return this;\n};\n\n/**\n * Adds a \"looking similar\" recommendation query.\n *\n * @param {LookingSimilarQuery} params the parameters for the recommendation\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.addLookingSimilar = function (params) {\n  this._recommendChange({\n    state: this.recommendState.addLookingSimilar(params),\n  });\n\n  return this;\n};\n\n/**\n * Removes an numeric filter to an attribute with the `operator` and `value` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * Some parameters are optional, triggering different behavior:\n *  - if the value is not provided, then all the numeric value will be removed for the\n *  specified attribute/operator couple.\n *  - if the operator is not provided either, then all the numeric filter on this attribute\n *  will be removed.\n *\n * This method resets the current page to 0.\n * @param  {string} attribute the attribute on which the numeric filter applies\n * @param  {string} [operator] the operator of the filter\n * @param  {number} [value] the value of the filter\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeNumericRefinement = function (\n  attribute,\n  operator,\n  value\n) {\n  this._change({\n    state: this.state\n      .resetPage()\n      .removeNumericRefinement(attribute, operator, value),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n/**\n * Removes a disjunctive filter to a faceted attribute with the `value` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * If the value is omitted, then this method will remove all the filters for the\n * attribute.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} [value] the associated value\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeDisjunctiveFacetRefinement = function (\n  facet,\n  value\n) {\n  this._change({\n    state: this.state\n      .resetPage()\n      .removeDisjunctiveFacetRefinement(facet, value),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#removeDisjunctiveFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.removeDisjunctiveRefine = function () {\n  return this.removeDisjunctiveFacetRefinement.apply(this, arguments);\n};\n\n/**\n * Removes the refinement set on a hierarchical facet.\n * @param {string} facet the facet name\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @throws Error if the facet is not defined or if the facet is not refined\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeHierarchicalFacetRefinement = function (\n  facet\n) {\n  this._change({\n    state: this.state.resetPage().removeHierarchicalFacetRefinement(facet),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n/**\n * Removes a filter to a faceted attribute with the `value` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * If the value is omitted, then this method will remove all the filters for the\n * attribute.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} [value] the associated value\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeFacetRefinement = function (facet, value) {\n  this._change({\n    state: this.state.resetPage().removeFacetRefinement(facet, value),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#removeFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.removeRefine = function () {\n  return this.removeFacetRefinement.apply(this, arguments);\n};\n\n/**\n * Removes an exclusion filter to a faceted attribute with the `value` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * If the value is omitted, then this method will remove all the filters for the\n * attribute.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} [value] the associated value\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeFacetExclusion = function (facet, value) {\n  this._change({\n    state: this.state.resetPage().removeExcludeRefinement(facet, value),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#removeFacetExclusion}\n */\nAlgoliaSearchHelper.prototype.removeExclude = function () {\n  return this.removeFacetExclusion.apply(this, arguments);\n};\n\n/**\n * Removes a tag filter with the `tag` provided. If the\n * filter is not set, it doesn't change the filters.\n *\n * This method resets the current page to 0.\n * @param {string} tag tag to remove from the filter\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeTag = function (tag) {\n  this._change({\n    state: this.state.resetPage().removeTagRefinement(tag),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n/**\n * Removes a \"frequently bought together\" recommendation query.\n *\n * @param {number} id identifier of the recommendation widget\n * @returns {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeFrequentlyBoughtTogether = function (id) {\n  this._recommendChange({\n    state: this.recommendState.removeParams(id),\n  });\n\n  return this;\n};\n\n/**\n * Removes a \"related products\" recommendation query.\n *\n * @param {number} id identifier of the recommendation widget\n * @returns {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeRelatedProducts = function (id) {\n  this._recommendChange({\n    state: this.recommendState.removeParams(id),\n  });\n\n  return this;\n};\n\n/**\n * Removes a \"trending items\" recommendation query.\n *\n * @param {number} id identifier of the recommendation widget\n * @returns {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeTrendingItems = function (id) {\n  this._recommendChange({\n    state: this.recommendState.removeParams(id),\n  });\n\n  return this;\n};\n\n/**\n * Removes a \"trending facets\" recommendation query.\n *\n * @param {number} id identifier of the recommendation widget\n * @returns {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeTrendingFacets = function (id) {\n  this._recommendChange({\n    state: this.recommendState.removeParams(id),\n  });\n\n  return this;\n};\n\n/**\n * Removes a \"looking similar\" recommendation query.\n *\n * @param {number} id identifier of the recommendation widget\n * @returns {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.removeLookingSimilar = function (id) {\n  this._recommendChange({\n    state: this.recommendState.removeParams(id),\n  });\n\n  return this;\n};\n\n/**\n * Adds or removes an exclusion filter to a faceted attribute with the `value` provided. If\n * the value is set then it removes it, otherwise it adds the filter.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.toggleFacetExclusion = function (facet, value) {\n  this._change({\n    state: this.state.resetPage().toggleExcludeFacetRefinement(facet, value),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#toggleFacetExclusion}\n */\nAlgoliaSearchHelper.prototype.toggleExclude = function () {\n  return this.toggleFacetExclusion.apply(this, arguments);\n};\n\n/**\n * Adds or removes a filter to a faceted attribute with the `value` provided. If\n * the value is set then it removes it, otherwise it adds the filter.\n *\n * This method can be used for conjunctive, disjunctive and hierarchical filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @throws Error will throw an error if the facet is not declared in the settings of the helper\n * @fires change\n * @chainable\n * @deprecated since version 2.19.0, see {@link AlgoliaSearchHelper#toggleFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.toggleRefinement = function (facet, value) {\n  return this.toggleFacetRefinement(facet, value);\n};\n\n/**\n * Adds or removes a filter to a faceted attribute with the `value` provided. If\n * the value is set then it removes it, otherwise it adds the filter.\n *\n * This method can be used for conjunctive, disjunctive and hierarchical filters.\n *\n * This method resets the current page to 0.\n * @param  {string} facet the facet to refine\n * @param  {string} value the associated value\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @throws Error will throw an error if the facet is not declared in the settings of the helper\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.toggleFacetRefinement = function (facet, value) {\n  this._change({\n    state: this.state.resetPage().toggleFacetRefinement(facet, value),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since version 2.4.0, see {@link AlgoliaSearchHelper#toggleFacetRefinement}\n */\nAlgoliaSearchHelper.prototype.toggleRefine = function () {\n  return this.toggleFacetRefinement.apply(this, arguments);\n};\n\n/**\n * Adds or removes a tag filter with the `value` provided. If\n * the value is set then it removes it, otherwise it adds the filter.\n *\n * This method resets the current page to 0.\n * @param {string} tag tag to remove or add\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.toggleTag = function (tag) {\n  this._change({\n    state: this.state.resetPage().toggleTagRefinement(tag),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n/**\n * Increments the page number by one.\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n * @example\n * helper.setPage(0).nextPage().getPage();\n * // returns 1\n */\nAlgoliaSearchHelper.prototype.nextPage = function () {\n  var page = this.state.page || 0;\n  return this.setPage(page + 1);\n};\n\n/**\n * Decrements the page number by one.\n * @fires change\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @chainable\n * @example\n * helper.setPage(1).previousPage().getPage();\n * // returns 0\n */\nAlgoliaSearchHelper.prototype.previousPage = function () {\n  var page = this.state.page || 0;\n  return this.setPage(page - 1);\n};\n\n/**\n * @private\n * @param {number} page The page number\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @chainable\n * @fires change\n */\nfunction setCurrentPage(page) {\n  if (page < 0) throw new Error('Page requested below 0.');\n\n  this._change({\n    state: this.state.setPage(page),\n    isPageReset: false,\n  });\n\n  return this;\n}\n\n/**\n * Change the current page\n * @deprecated\n * @param  {number} page The page number\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.setCurrentPage = setCurrentPage;\n\n/**\n * Updates the current page.\n * @function\n * @param  {number} page The page number\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.setPage = setCurrentPage;\n\n/**\n * Updates the name of the index that will be targeted by the query.\n *\n * This method resets the current page to 0.\n * @param {string} name the index name\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.setIndex = function (name) {\n  this._change({\n    state: this.state.resetPage().setIndex(name),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n/**\n * Update a parameter of the search. This method reset the page\n *\n * The complete list of parameters is available on the\n * [Algolia website](https://www.algolia.com/doc/rest#query-an-index).\n * The most commonly used parameters have their own [shortcuts](#query-parameters-shortcuts)\n * or benefit from higher-level APIs (all the kind of filters and facets have their own API)\n *\n * This method resets the current page to 0.\n * @param {string} parameter name of the parameter to update\n * @param {any} value new value of the parameter\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n * @example\n * helper.setQueryParameter('hitsPerPage', 20).search();\n */\nAlgoliaSearchHelper.prototype.setQueryParameter = function (parameter, value) {\n  this._change({\n    state: this.state.resetPage().setQueryParameter(parameter, value),\n    isPageReset: true,\n  });\n\n  return this;\n};\n\n/**\n * Set the whole state (warning: will erase previous state)\n * @param {SearchParameters} newState the whole new state\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @fires change\n * @chainable\n */\nAlgoliaSearchHelper.prototype.setState = function (newState) {\n  this._change({\n    state: SearchParameters.make(newState),\n    isPageReset: false,\n  });\n\n  return this;\n};\n\n/**\n * Override the current state without triggering a change event.\n * Do not use this method unless you know what you are doing. (see the example\n * for a legit use case)\n * @param {SearchParameters} newState the whole new state\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n * @example\n *  helper.on('change', function(state){\n *    // In this function you might want to find a way to store the state in the url/history\n *    updateYourURL(state)\n *  })\n *  window.onpopstate = function(event){\n *    // This is naive though as you should check if the state is really defined etc.\n *    helper.overrideStateWithoutTriggeringChangeEvent(event.state).search()\n *  }\n * @chainable\n */\nAlgoliaSearchHelper.prototype.overrideStateWithoutTriggeringChangeEvent =\n  function (newState) {\n    this.state = new SearchParameters(newState);\n    return this;\n  };\n\n/**\n * Check if an attribute has any numeric, conjunctive, disjunctive or hierarchical filters.\n * @param {string} attribute the name of the attribute\n * @return {boolean} true if the attribute is filtered by at least one value\n * @example\n * // hasRefinements works with numeric, conjunctive, disjunctive and hierarchical filters\n * helper.hasRefinements('price'); // false\n * helper.addNumericRefinement('price', '>', 100);\n * helper.hasRefinements('price'); // true\n *\n * helper.hasRefinements('color'); // false\n * helper.addFacetRefinement('color', 'blue');\n * helper.hasRefinements('color'); // true\n *\n * helper.hasRefinements('material'); // false\n * helper.addDisjunctiveFacetRefinement('material', 'plastic');\n * helper.hasRefinements('material'); // true\n *\n * helper.hasRefinements('categories'); // false\n * helper.toggleFacetRefinement('categories', 'kitchen > knife');\n * helper.hasRefinements('categories'); // true\n *\n */\nAlgoliaSearchHelper.prototype.hasRefinements = function (attribute) {\n  if (objectHasKeys(this.state.getNumericRefinements(attribute))) {\n    return true;\n  } else if (this.state.isConjunctiveFacet(attribute)) {\n    return this.state.isFacetRefined(attribute);\n  } else if (this.state.isDisjunctiveFacet(attribute)) {\n    return this.state.isDisjunctiveFacetRefined(attribute);\n  } else if (this.state.isHierarchicalFacet(attribute)) {\n    return this.state.isHierarchicalFacetRefined(attribute);\n  }\n\n  // there's currently no way to know that the user did call `addNumericRefinement` at some point\n  // thus we cannot distinguish if there once was a numeric refinement that was cleared\n  // so we will return false in every other situations to be consistent\n  // while what we should do here is throw because we did not find the attribute in any type\n  // of refinement\n  return false;\n};\n\n/**\n * Check if a value is excluded for a specific faceted attribute. If the value\n * is omitted then the function checks if there is any excluding refinements.\n *\n * @param  {string}  facet name of the attribute for used for faceting\n * @param  {string}  [value] optional value. If passed will test that this value\n * is filtering the given facet.\n * @return {boolean} true if refined\n * @example\n * helper.isExcludeRefined('color'); // false\n * helper.isExcludeRefined('color', 'blue') // false\n * helper.isExcludeRefined('color', 'red') // false\n *\n * helper.addFacetExclusion('color', 'red');\n *\n * helper.isExcludeRefined('color'); // true\n * helper.isExcludeRefined('color', 'blue') // false\n * helper.isExcludeRefined('color', 'red') // true\n */\nAlgoliaSearchHelper.prototype.isExcluded = function (facet, value) {\n  return this.state.isExcludeRefined(facet, value);\n};\n\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since 2.4.0, see {@link AlgoliaSearchHelper#hasRefinements}\n */\nAlgoliaSearchHelper.prototype.isDisjunctiveRefined = function (facet, value) {\n  return this.state.isDisjunctiveFacetRefined(facet, value);\n};\n\n/**\n * Check if the string is a currently filtering tag.\n * @param {string} tag tag to check\n * @return {boolean} true if the tag is currently refined\n */\nAlgoliaSearchHelper.prototype.hasTag = function (tag) {\n  return this.state.isTagRefined(tag);\n};\n\n// eslint-disable-next-line valid-jsdoc\n/**\n * @deprecated since 2.4.0, see {@link AlgoliaSearchHelper#hasTag}\n */\nAlgoliaSearchHelper.prototype.isTagRefined = function () {\n  return this.hasTagRefinements.apply(this, arguments);\n};\n\n/**\n * Get the name of the currently used index.\n * @return {string} name of the index\n * @example\n * helper.setIndex('highestPrice_products').getIndex();\n * // returns 'highestPrice_products'\n */\nAlgoliaSearchHelper.prototype.getIndex = function () {\n  return this.state.index;\n};\n\nfunction getCurrentPage() {\n  return this.state.page;\n}\n\n/**\n * Get the currently selected page\n * @deprecated\n * @return {number} the current page\n */\nAlgoliaSearchHelper.prototype.getCurrentPage = getCurrentPage;\n/**\n * Get the currently selected page\n * @function\n * @return {number} the current page\n */\nAlgoliaSearchHelper.prototype.getPage = getCurrentPage;\n\n/**\n * Get all the tags currently set to filters the results.\n *\n * @return {string[]} The list of tags currently set.\n */\nAlgoliaSearchHelper.prototype.getTags = function () {\n  return this.state.tagRefinements;\n};\n\n/**\n * Get the list of refinements for a given attribute. This method works with\n * conjunctive, disjunctive, excluding and numerical filters.\n *\n * See also SearchResults#getRefinements\n *\n * @param {string} facetName attribute name used for faceting\n * @return {Array.<FacetRefinement|NumericRefinement>} All Refinement are objects that contain a value, and\n * a type. Numeric also contains an operator.\n * @example\n * helper.addNumericRefinement('price', '>', 100);\n * helper.getRefinements('price');\n * // [\n * //   {\n * //     \"value\": [\n * //       100\n * //     ],\n * //     \"operator\": \">\",\n * //     \"type\": \"numeric\"\n * //   }\n * // ]\n * @example\n * helper.addFacetRefinement('color', 'blue');\n * helper.addFacetExclusion('color', 'red');\n * helper.getRefinements('color');\n * // [\n * //   {\n * //     \"value\": \"blue\",\n * //     \"type\": \"conjunctive\"\n * //   },\n * //   {\n * //     \"value\": \"red\",\n * //     \"type\": \"exclude\"\n * //   }\n * // ]\n * @example\n * helper.addDisjunctiveFacetRefinement('material', 'plastic');\n * // [\n * //   {\n * //     \"value\": \"plastic\",\n * //     \"type\": \"disjunctive\"\n * //   }\n * // ]\n */\nAlgoliaSearchHelper.prototype.getRefinements = function (facetName) {\n  var refinements = [];\n\n  if (this.state.isConjunctiveFacet(facetName)) {\n    var conjRefinements = this.state.getConjunctiveRefinements(facetName);\n\n    conjRefinements.forEach(function (r) {\n      refinements.push({\n        value: r,\n        type: 'conjunctive',\n      });\n    });\n\n    var excludeRefinements = this.state.getExcludeRefinements(facetName);\n\n    excludeRefinements.forEach(function (r) {\n      refinements.push({\n        value: r,\n        type: 'exclude',\n      });\n    });\n  } else if (this.state.isDisjunctiveFacet(facetName)) {\n    var disjunctiveRefinements =\n      this.state.getDisjunctiveRefinements(facetName);\n\n    disjunctiveRefinements.forEach(function (r) {\n      refinements.push({\n        value: r,\n        type: 'disjunctive',\n      });\n    });\n  }\n\n  var numericRefinements = this.state.getNumericRefinements(facetName);\n\n  Object.keys(numericRefinements).forEach(function (operator) {\n    var value = numericRefinements[operator];\n\n    refinements.push({\n      value: value,\n      operator: operator,\n      type: 'numeric',\n    });\n  });\n\n  return refinements;\n};\n\n/**\n * Return the current refinement for the (attribute, operator)\n * @param {string} attribute attribute in the record\n * @param {string} operator operator applied on the refined values\n * @return {Array.<number|number[]>} refined values\n */\nAlgoliaSearchHelper.prototype.getNumericRefinement = function (\n  attribute,\n  operator\n) {\n  return this.state.getNumericRefinement(attribute, operator);\n};\n\n/**\n * Get the current breadcrumb for a hierarchical facet, as an array\n * @param  {string} facetName Hierarchical facet name\n * @return {array.<string>} the path as an array of string\n */\nAlgoliaSearchHelper.prototype.getHierarchicalFacetBreadcrumb = function (\n  facetName\n) {\n  return this.state.getHierarchicalFacetBreadcrumb(facetName);\n};\n\n// /////////// PRIVATE\n\n/**\n * Perform the underlying queries\n * @private\n * @param {object} options options for the query\n * @param {boolean} [options.onlyWithDerivedHelpers=false] if true, only the derived helpers will be queried\n * @return {undefined} does not return anything\n * @fires search\n * @fires result\n * @fires error\n */\nAlgoliaSearchHelper.prototype._search = function (options) {\n  var state = this.state;\n  var states = [];\n  var mainQueries = [];\n\n  if (!options.onlyWithDerivedHelpers) {\n    mainQueries = requestBuilder._getQueries(state.index, state);\n\n    states.push({\n      state: state,\n      queriesCount: mainQueries.length,\n      helper: this,\n    });\n\n    this.emit('search', {\n      state: state,\n      results: this.lastResults,\n    });\n  }\n\n  var derivedQueries = this.derivedHelpers.map(function (derivedHelper) {\n    var derivedState = derivedHelper.getModifiedState(state);\n    var derivedStateQueries = derivedState.index\n      ? requestBuilder._getQueries(derivedState.index, derivedState)\n      : [];\n\n    states.push({\n      state: derivedState,\n      queriesCount: derivedStateQueries.length,\n      helper: derivedHelper,\n    });\n\n    derivedHelper.emit('search', {\n      state: derivedState,\n      results: derivedHelper.lastResults,\n    });\n\n    return derivedStateQueries;\n  });\n\n  var queries = Array.prototype.concat.apply(mainQueries, derivedQueries);\n\n  var queryId = this._queryId++;\n  this._currentNbQueries++;\n\n  if (!queries.length) {\n    return Promise.resolve({ results: [] }).then(\n      this._dispatchAlgoliaResponse.bind(this, states, queryId)\n    );\n  }\n\n  try {\n    this.client\n      .search(queries)\n      .then(this._dispatchAlgoliaResponse.bind(this, states, queryId))\n      .catch(this._dispatchAlgoliaError.bind(this, queryId));\n  } catch (error) {\n    // If we reach this part, we're in an internal error state\n    this.emit('error', {\n      error: error,\n    });\n  }\n\n  return undefined;\n};\n\nAlgoliaSearchHelper.prototype._recommend = function () {\n  var searchState = this.state;\n  var recommendState = this.recommendState;\n  var index = this.getIndex();\n  var states = [{ state: recommendState, index: index, helper: this }];\n  var ids = recommendState.params.map(function (param) {\n    return param.$$id;\n  });\n\n  this.emit('fetch', {\n    recommend: {\n      state: recommendState,\n      results: this.lastRecommendResults,\n    },\n  });\n\n  var cache = this._recommendCache;\n\n  var derivedQueries = this.derivedHelpers.map(function (derivedHelper) {\n    var derivedIndex = derivedHelper.getModifiedState(searchState).index;\n    if (!derivedIndex) {\n      return [];\n    }\n\n    // Contrary to what is done when deriving the search state, we don't want to\n    // provide the current recommend state to the derived helper, as it would\n    // inherit unwanted queries. We instead provide an empty recommend state.\n    var derivedState = derivedHelper.getModifiedRecommendState(\n      new RecommendParameters()\n    );\n    states.push({\n      state: derivedState,\n      index: derivedIndex,\n      helper: derivedHelper,\n    });\n\n    ids = Array.prototype.concat.apply(\n      ids,\n      derivedState.params.map(function (param) {\n        return param.$$id;\n      })\n    );\n\n    derivedHelper.emit('fetch', {\n      recommend: {\n        state: derivedState,\n        results: derivedHelper.lastRecommendResults,\n      },\n    });\n\n    return derivedState._buildQueries(derivedIndex, cache);\n  });\n\n  var queries = Array.prototype.concat.apply(\n    this.recommendState._buildQueries(index, cache),\n    derivedQueries\n  );\n\n  if (queries.length === 0) {\n    return;\n  }\n\n  if (\n    queries.length > 0 &&\n    typeof this.client.getRecommendations === 'undefined'\n  ) {\n    // eslint-disable-next-line no-console\n    console.warn(\n      'Please update algoliasearch/lite to the latest version in order to use recommend widgets.'\n    );\n    return;\n  }\n\n  var queryId = this._recommendQueryId++;\n  this._currentNbRecommendQueries++;\n\n  try {\n    this.client\n      .getRecommendations(queries)\n      .then(this._dispatchRecommendResponse.bind(this, queryId, states, ids))\n      .catch(this._dispatchRecommendError.bind(this, queryId));\n  } catch (error) {\n    // If we reach this part, we're in an internal error state\n    this.emit('error', {\n      error: error,\n    });\n  }\n\n  return;\n};\n\n/**\n * Transform the responses as sent by the server and transform them into a user\n * usable object that merge the results of all the batch requests. It will dispatch\n * over the different helper + derived helpers (when there are some).\n * @private\n * @param {array.<{SearchParameters, AlgoliaQueries, AlgoliaSearchHelper}>} states state used to generate the request\n * @param {number} queryId id of the current request\n * @param {object} content content of the response\n * @return {undefined}\n */\nAlgoliaSearchHelper.prototype._dispatchAlgoliaResponse = function (\n  states,\n  queryId,\n  content\n) {\n  // eslint-disable-next-line consistent-this\n  var self = this;\n\n  // @TODO remove the number of outdated queries discarded instead of just one\n\n  if (queryId < this._lastQueryIdReceived) {\n    // Outdated answer\n    return;\n  }\n\n  this._currentNbQueries -= queryId - this._lastQueryIdReceived;\n  this._lastQueryIdReceived = queryId;\n\n  if (this._currentNbQueries === 0) this.emit('searchQueueEmpty');\n\n  var results = content.results.slice();\n\n  states.forEach(function (s) {\n    var state = s.state;\n    var queriesCount = s.queriesCount;\n    var helper = s.helper;\n    var specificResults = results.splice(0, queriesCount);\n\n    if (!state.index) {\n      helper.emit('result', {\n        results: null,\n        state: state,\n      });\n      return;\n    }\n\n    helper.lastResults = new SearchResults(\n      state,\n      specificResults,\n      self._searchResultsOptions\n    );\n\n    helper.emit('result', {\n      results: helper.lastResults,\n      state: state,\n    });\n  });\n};\n\nAlgoliaSearchHelper.prototype._dispatchRecommendResponse = function (\n  queryId,\n  states,\n  ids,\n  content\n) {\n  // @TODO remove the number of outdated queries discarded instead of just one\n\n  if (queryId < this._lastRecommendQueryIdReceived) {\n    // Outdated answer\n    return;\n  }\n\n  this._currentNbRecommendQueries -=\n    queryId - this._lastRecommendQueryIdReceived;\n  this._lastRecommendQueryIdReceived = queryId;\n\n  if (this._currentNbRecommendQueries === 0) this.emit('recommendQueueEmpty');\n\n  var cache = this._recommendCache;\n\n  var idsMap = {};\n  ids\n    .filter(function (id) {\n      return cache[id] === undefined;\n    })\n    .forEach(function (id, index) {\n      if (!idsMap[id]) idsMap[id] = [];\n\n      idsMap[id].push(index);\n    });\n\n  Object.keys(idsMap).forEach(function (id) {\n    var indices = idsMap[id];\n    var firstResult = content.results[indices[0]];\n    if (indices.length === 1) {\n      cache[id] = firstResult;\n      return;\n    }\n    cache[id] = Object.assign({}, firstResult, {\n      hits: sortAndMergeRecommendations(\n        indices.map(function (idx) {\n          return content.results[idx].hits;\n        })\n      ),\n    });\n  });\n\n  var results = {};\n  ids.forEach(function (id) {\n    results[id] = cache[id];\n  });\n\n  states.forEach(function (s) {\n    var state = s.state;\n    var helper = s.helper;\n\n    if (!s.index) {\n      // eslint-disable-next-line no-warning-comments\n      // TODO: emit \"result\" event when events for Recommend are implemented\n      helper.emit('recommend:result', {\n        results: null,\n        state: state,\n      });\n      return;\n    }\n\n    helper.lastRecommendResults = new RecommendResults(state, results);\n\n    // eslint-disable-next-line no-warning-comments\n    // TODO: emit \"result\" event when events for Recommend are implemented\n    helper.emit('recommend:result', {\n      recommend: {\n        results: helper.lastRecommendResults,\n        state: state,\n      },\n    });\n  });\n};\n\nAlgoliaSearchHelper.prototype._dispatchAlgoliaError = function (\n  queryId,\n  error\n) {\n  if (queryId < this._lastQueryIdReceived) {\n    // Outdated answer\n    return;\n  }\n\n  this._currentNbQueries -= queryId - this._lastQueryIdReceived;\n  this._lastQueryIdReceived = queryId;\n\n  this.emit('error', {\n    error: error,\n  });\n\n  if (this._currentNbQueries === 0) this.emit('searchQueueEmpty');\n};\n\nAlgoliaSearchHelper.prototype._dispatchRecommendError = function (\n  queryId,\n  error\n) {\n  if (queryId < this._lastRecommendQueryIdReceived) {\n    // Outdated answer\n    return;\n  }\n\n  this._currentNbRecommendQueries -=\n    queryId - this._lastRecommendQueryIdReceived;\n  this._lastRecommendQueryIdReceived = queryId;\n\n  this.emit('error', {\n    error: error,\n  });\n\n  if (this._currentNbRecommendQueries === 0) this.emit('recommendQueueEmpty');\n};\n\nAlgoliaSearchHelper.prototype.containsRefinement = function (\n  query,\n  facetFilters,\n  numericFilters,\n  tagFilters\n) {\n  return (\n    query ||\n    facetFilters.length !== 0 ||\n    numericFilters.length !== 0 ||\n    tagFilters.length !== 0\n  );\n};\n\n/**\n * Test if there are some disjunctive refinements on the facet\n * @private\n * @param {string} facet the attribute to test\n * @return {boolean} true if there are refinements on this attribute\n */\nAlgoliaSearchHelper.prototype._hasDisjunctiveRefinements = function (facet) {\n  return (\n    this.state.disjunctiveRefinements[facet] &&\n    this.state.disjunctiveRefinements[facet].length > 0\n  );\n};\n\nAlgoliaSearchHelper.prototype._change = function (event) {\n  var state = event.state;\n  var isPageReset = event.isPageReset;\n\n  if (state !== this.state) {\n    this.state = state;\n\n    this.emit('change', {\n      state: this.state,\n      results: this.lastResults,\n      isPageReset: isPageReset,\n    });\n  }\n};\n\nAlgoliaSearchHelper.prototype._recommendChange = function (event) {\n  var state = event.state;\n\n  if (state !== this.recommendState) {\n    this.recommendState = state;\n\n    // eslint-disable-next-line no-warning-comments\n    // TODO: emit \"change\" event when events for Recommend are implemented\n    this.emit('recommend:change', {\n      search: {\n        results: this.lastResults,\n        state: this.state,\n      },\n      recommend: {\n        results: this.lastRecommendResults,\n        state: this.recommendState,\n      },\n    });\n  }\n};\n\n/**\n * Clears the cache of the underlying Algolia client.\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n */\nAlgoliaSearchHelper.prototype.clearCache = function () {\n  if (this.client.clearCache) this.client.clearCache();\n  return this;\n};\n\n/**\n * Updates the internal client instance. If the reference of the clients\n * are equal then no update is actually done.\n * @param  {AlgoliaSearch} newClient an AlgoliaSearch client\n * @return {AlgoliaSearchHelper} Method is chainable, it returns itself\n */\nAlgoliaSearchHelper.prototype.setClient = function (newClient) {\n  if (this.client === newClient) return this;\n\n  if (typeof newClient.addAlgoliaAgent === 'function') {\n    newClient.addAlgoliaAgent('JS Helper (' + version + ')');\n  }\n  this.client = newClient;\n\n  return this;\n};\n\n/**\n * Gets the instance of the currently used client.\n * @return {AlgoliaSearch} the currently used client\n */\nAlgoliaSearchHelper.prototype.getClient = function () {\n  return this.client;\n};\n\n/**\n * Creates an derived instance of the Helper. A derived helper\n * is a way to request other indices synchronised with the lifecycle\n * of the main Helper. This mechanism uses the multiqueries feature\n * of Algolia to aggregate all the requests in a single network call.\n *\n * This method takes a function that is used to create a new SearchParameter\n * that will be used to create requests to Algolia. Those new requests\n * are created just before the `search` event. The signature of the function\n * is `SearchParameters -> SearchParameters`.\n *\n * This method returns a new DerivedHelper which is an EventEmitter\n * that fires the same `search`, `result` and `error` events. Those\n * events, however, will receive data specific to this DerivedHelper\n * and the SearchParameters that is returned by the call of the\n * parameter function.\n * @param {function} fn SearchParameters -> SearchParameters\n * @param {function} recommendFn RecommendParameters -> RecommendParameters\n * @return {DerivedHelper} a new DerivedHelper\n */\nAlgoliaSearchHelper.prototype.derive = function (fn, recommendFn) {\n  var derivedHelper = new DerivedHelper(this, fn, recommendFn);\n  this.derivedHelpers.push(derivedHelper);\n  return derivedHelper;\n};\n\n/**\n * This method detaches a derived Helper from the main one. Prefer using the one from the\n * derived helper itself, to remove the event listeners too.\n * @private\n * @param  {DerivedHelper} derivedHelper the derived helper to detach\n * @return {undefined} nothing is returned\n * @throws Error\n */\nAlgoliaSearchHelper.prototype.detachDerivedHelper = function (derivedHelper) {\n  var pos = this.derivedHelpers.indexOf(derivedHelper);\n  if (pos === -1) throw new Error('Derived helper already detached');\n  this.derivedHelpers.splice(pos, 1);\n};\n\n/**\n * This method returns true if there is currently at least one on-going search.\n * @return {boolean} true if there is a search pending\n */\nAlgoliaSearchHelper.prototype.hasPendingRequests = function () {\n  return this._currentNbQueries > 0;\n};\n\n/**\n * @typedef AlgoliaSearchHelper.NumericRefinement\n * @type {object}\n * @property {number[]} value the numbers that are used for filtering this attribute with\n * the operator specified.\n * @property {string} operator the faceting data: value, number of entries\n * @property {string} type will be 'numeric'\n */\n\n/**\n * @typedef AlgoliaSearchHelper.FacetRefinement\n * @type {object}\n * @property {string} value the string use to filter the attribute\n * @property {string} type the type of filter: 'conjunctive', 'disjunctive', 'exclude'\n */\n\nmodule.exports = AlgoliaSearchHelper;\n", "'use strict';\n\nvar AlgoliaSearchHelper = require('./src/algoliasearch.helper');\nvar RecommendParameters = require('./src/RecommendParameters');\nvar RecommendResults = require('./src/RecommendResults');\nvar SearchParameters = require('./src/SearchParameters');\nvar SearchResults = require('./src/SearchResults');\n\n/**\n * The algoliasearchHelper module is the function that will let its\n * contains everything needed to use the Algoliasearch\n * Helper. It is a also a function that instanciate the helper.\n * To use the helper, you also need the Algolia JS client v3.\n * @example\n * //using the UMD build\n * var client = algoliasearch('latency', '6be0576ff61c053d5f9a3225e2a90f76');\n * var helper = algoliasearchHelper(client, 'bestbuy', {\n *   facets: ['shipping'],\n *   disjunctiveFacets: ['category']\n * });\n * helper.on('result', function(event) {\n *   console.log(event.results);\n * });\n * helper\n *   .toggleFacetRefinement('category', 'Movies & TV Shows')\n *   .toggleFacetRefinement('shipping', 'Free shipping')\n *   .search();\n * @example\n * // The helper is an event emitter using the node API\n * helper.on('result', updateTheResults);\n * helper.once('result', updateTheResults);\n * helper.removeListener('result', updateTheResults);\n * helper.removeAllListeners('result');\n * @module algoliasearchHelper\n * @param  {AlgoliaSearch} client an AlgoliaSearch client\n * @param  {string} index the name of the index to query\n * @param  {SearchParameters|object} opts an object defining the initial config of the search. It doesn't have to be a {SearchParameters}, just an object containing the properties you need from it.\n * @param {SearchResultsOptions|object} searchResultsOptions an object defining the options to use when creating the search results.\n * @return {AlgoliaSearchHelper} The helper instance\n */\nfunction algoliasearchHelper(client, index, opts, searchResultsOptions) {\n  return new AlgoliaSearchHelper(client, index, opts, searchResultsOptions);\n}\n\n/**\n * The version currently used\n * @member module:algoliasearchHelper.version\n * @type {number}\n */\nalgoliasearchHelper.version = require('./src/version');\n\n/**\n * Constructor for the Helper.\n * @member module:algoliasearchHelper.AlgoliaSearchHelper\n * @type {AlgoliaSearchHelper}\n */\nalgoliasearchHelper.AlgoliaSearchHelper = AlgoliaSearchHelper;\n\n/**\n * Constructor for the object containing all the parameters of the search.\n * @member module:algoliasearchHelper.SearchParameters\n * @type {SearchParameters}\n */\nalgoliasearchHelper.SearchParameters = SearchParameters;\n\n/**\n * Constructor for the object containing all the parameters for Recommend.\n * @member module:algoliasearchHelper.RecommendParameters\n * @type {RecommendParameters}\n */\nalgoliasearchHelper.RecommendParameters = RecommendParameters;\n\n/**\n * Constructor for the object containing the results of the search.\n * @member module:algoliasearchHelper.SearchResults\n * @type {SearchResults}\n */\nalgoliasearchHelper.SearchResults = SearchResults;\n\n/**\n * Constructor for the object containing the results for Recommend.\n * @member module:algoliasearchHelper.RecommendResults\n * @type {RecommendResults}\n */\nalgoliasearchHelper.RecommendResults = RecommendResults;\n\nmodule.exports = algoliasearchHelper;\n"],
  "mappings": "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",
  "names": ["facet", "require_algoliasearch_helper"]
}
